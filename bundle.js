(()=>{"use strict";var e={172:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),a=t.n(o),r=t(645),i=t.n(r)()(a());i.push([e.id,".filterTitle {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.title {\n  margin-left: 48px;\n  font-size: calc(24px + 0.5vw);\n  color: #0e0080;\n  font-weight: 600;\n}\n\n.filterDescription {\n  margin-left: 48px;\n  margin-top: 12px;\n  font-size: calc(16px + 0.5vw);\n  color: #0e0080;\n  font-weight: 300;\n}\n","",{version:3,sources:["webpack://./src/components/styles/filter-title.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,uBAAuB;AACzB;;AAEA;EACE,iBAAiB;EACjB,6BAA6B;EAC7B,cAAc;EACd,gBAAgB;AAClB;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;EAChB,6BAA6B;EAC7B,cAAc;EACd,gBAAgB;AAClB",sourcesContent:[".filterTitle {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.title {\n  margin-left: 48px;\n  font-size: calc(24px + 0.5vw);\n  color: #0e0080;\n  font-weight: 600;\n}\n\n.filterDescription {\n  margin-left: 48px;\n  margin-top: 12px;\n  font-size: calc(16px + 0.5vw);\n  color: #0e0080;\n  font-weight: 300;\n}\n"],sourceRoot:""}]);const s=i},188:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),a=t.n(o),r=t(645),i=t.n(r)()(a());i.push([e.id,".taskForm {\n  padding: 8px;\n  flex: 1 1 0%;\n  margin: 24px 48px 24px 24px;\n}\n\n#taskName, #taskDescription, #priority,\n#taskProject, #dueDate, #updateTaskName, #updateTaskDescription, \n#updateTaskPriority, #updateTaskProject, #updateDueDate {\n  width: calc(60px + 8vw);\n  margin-left: 24px;\n  margin-right: 12px;\n  margin-top: 12px;\n}\n\n#taskName, #updateTaskName {\n  font-size: 18px;\n  border-top: none;\n  border-left: none;\n  border-right: none;\n  border-bottom: solid #5a49e3;\n  background: white;\n}\n\n#taskDescription, #updateTaskDescription {\n  font-size: 18px;\n  border-top: none;\n  border-left: none;\n  border-right: none;\n  border-bottom: solid #5a49e3;\n  background: white;\n}\n\n#priority, #updateTaskPriority {\n  font-size: 18px;\n}\n\n#taskProject, #updateTaskProject {\n  font-size: 18px;\n}\n\n#dueDate, #updateTaskDueDate {\n  font-size: 18px;\n}\n\n.formButtons {\n  display: flex;\n  justify-content: end;\n  margin-top: 24px;\n  margin-bottom: 12px;\n}\n\n.saveButton, #updateSave {\n  border: none;\n  font-size: 16px;\n  background: #b3f8b1;\n  border-radius: 2px;\n  width: 80px;\n  padding: 6px;\n  margin-right: 24px;\n  margin-left: 24px;\n  margin-top: 24px;\n}\n\n.cancelButton {\n  border: none;\n  font-size: 16px;\n  background: #f9afaf;\n  border-radius: 2px;\n  padding: 6px;\n  width: 80px;\n  margin-top: 24px;\n}\n\ntextarea:focus,\ninput:focus {\n  outline: none;\n}\n","",{version:3,sources:["webpack://./src/components/styles/form-styles.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,YAAY;EACZ,2BAA2B;AAC7B;;AAEA;;;EAGE,uBAAuB;EACvB,iBAAiB;EACjB,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,gBAAgB;EAChB,iBAAiB;EACjB,kBAAkB;EAClB,4BAA4B;EAC5B,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,gBAAgB;EAChB,iBAAiB;EACjB,kBAAkB;EAClB,4BAA4B;EAC5B,iBAAiB;AACnB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,oBAAoB;EACpB,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,mBAAmB;EACnB,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,mBAAmB;EACnB,kBAAkB;EAClB,YAAY;EACZ,WAAW;EACX,gBAAgB;AAClB;;AAEA;;EAEE,aAAa;AACf",sourcesContent:[".taskForm {\n  padding: 8px;\n  flex: 1 1 0%;\n  margin: 24px 48px 24px 24px;\n}\n\n#taskName, #taskDescription, #priority,\n#taskProject, #dueDate, #updateTaskName, #updateTaskDescription, \n#updateTaskPriority, #updateTaskProject, #updateDueDate {\n  width: calc(60px + 8vw);\n  margin-left: 24px;\n  margin-right: 12px;\n  margin-top: 12px;\n}\n\n#taskName, #updateTaskName {\n  font-size: 18px;\n  border-top: none;\n  border-left: none;\n  border-right: none;\n  border-bottom: solid #5a49e3;\n  background: white;\n}\n\n#taskDescription, #updateTaskDescription {\n  font-size: 18px;\n  border-top: none;\n  border-left: none;\n  border-right: none;\n  border-bottom: solid #5a49e3;\n  background: white;\n}\n\n#priority, #updateTaskPriority {\n  font-size: 18px;\n}\n\n#taskProject, #updateTaskProject {\n  font-size: 18px;\n}\n\n#dueDate, #updateTaskDueDate {\n  font-size: 18px;\n}\n\n.formButtons {\n  display: flex;\n  justify-content: end;\n  margin-top: 24px;\n  margin-bottom: 12px;\n}\n\n.saveButton, #updateSave {\n  border: none;\n  font-size: 16px;\n  background: #b3f8b1;\n  border-radius: 2px;\n  width: 80px;\n  padding: 6px;\n  margin-right: 24px;\n  margin-left: 24px;\n  margin-top: 24px;\n}\n\n.cancelButton {\n  border: none;\n  font-size: 16px;\n  background: #f9afaf;\n  border-radius: 2px;\n  padding: 6px;\n  width: 80px;\n  margin-top: 24px;\n}\n\ntextarea:focus,\ninput:focus {\n  outline: none;\n}\n"],sourceRoot:""}]);const s=i},297:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),a=t.n(o),r=t(645),i=t.n(r)()(a());i.push([e.id,"#content {\n  display: flex;\n}\n\n.leftColumn {\n  height: 100vh;\n  min-height: 100%;\n  width: 25vw;\n  background: #efefef;\n}\n\n.rightColumn {\n  height: 100vh;\n  min-height: 100%;\n  width: 75vw;\n}\n\n.header {\n  height: 200px;\n  width: 75vw;\n  background: #d9d9d9;\n  box-shadow: 7px -2px 5px 7px rgba(0, 0, 0, 0.33);\n}\n\n@media screen and (max-width: 700px) {\n  .leftColumn {\n    position: absolute;\n    height: 100vh;\n    width: 100vw;\n  }\n}\n\n.logoCenter,\n.lineCenter {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.icon {\n  width: 200px;\n  height: 200px;\n}\n\n.line {\n  height: 2px;\n  width: 22vw;\n  background: #5a49e3;\n}\n\n.hamburgerDiv {\n  position: absolute;\n}\n\n#menuToggle {\n  opacity: 0;\n}\n#menuToggle:checked + .menuToggleBtn > span {\n  transform: rotate(45deg);\n}\n#menuToggle:checked + .menuToggleBtn > span::before {\n  top: 0;\n  transform: rotate(0deg);\n}\n#menuToggle:checked + .menuToggleBtn > span::after {\n  top: 0;\n  transform: rotate(90deg);\n}\n#menuToggle:checked ~ .leftColumn {\n  position: absolute !important;\n  width: 100vw !important;\n  height: 100vw !important;\n}\n\n.menuToggleBtn {\n  position: fixed;\n  top: 20px;\n  left: 20px;\n  width: 26px;\n  height: 26px;\n  cursor: pointer;\n  z-index: 1;\n}\n.menuToggleBtn > span,\n.menuToggleBtn > span::before,\n.menuToggleBtn > span::after {\n  display: block;\n  position: absolute;\n  width: 100%;\n  height: 2px;\n  background-color: #616161;\n  transition-duration: .25s;\n}\n.menuToggleBtn > span::before {\n  content: '';\n  top: -8px;\n}\n.menuToggleBtn > span::after {\n  content: '';\n  top: 8px;\n}","",{version:3,sources:["webpack://./src/components/styles/layout-styles.css"],names:[],mappings:"AAAA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,gBAAgB;EAChB,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,gBAAgB;EAChB,WAAW;AACb;;AAEA;EACE,aAAa;EACb,WAAW;EACX,mBAAmB;EACnB,gDAAgD;AAClD;;AAEA;EACE;IACE,kBAAkB;IAClB,aAAa;IACb,YAAY;EACd;AACF;;AAEA;;EAEE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,WAAW;EACX,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,UAAU;AACZ;AACA;EACE,wBAAwB;AAC1B;AACA;EACE,MAAM;EACN,uBAAuB;AACzB;AACA;EACE,MAAM;EACN,wBAAwB;AAC1B;AACA;EACE,6BAA6B;EAC7B,uBAAuB;EACvB,wBAAwB;AAC1B;;AAEA;EACE,eAAe;EACf,SAAS;EACT,UAAU;EACV,WAAW;EACX,YAAY;EACZ,eAAe;EACf,UAAU;AACZ;AACA;;;EAGE,cAAc;EACd,kBAAkB;EAClB,WAAW;EACX,WAAW;EACX,yBAAyB;EACzB,yBAAyB;AAC3B;AACA;EACE,WAAW;EACX,SAAS;AACX;AACA;EACE,WAAW;EACX,QAAQ;AACV",sourcesContent:["#content {\n  display: flex;\n}\n\n.leftColumn {\n  height: 100vh;\n  min-height: 100%;\n  width: 25vw;\n  background: #efefef;\n}\n\n.rightColumn {\n  height: 100vh;\n  min-height: 100%;\n  width: 75vw;\n}\n\n.header {\n  height: 200px;\n  width: 75vw;\n  background: #d9d9d9;\n  box-shadow: 7px -2px 5px 7px rgba(0, 0, 0, 0.33);\n}\n\n@media screen and (max-width: 700px) {\n  .leftColumn {\n    position: absolute;\n    height: 100vh;\n    width: 100vw;\n  }\n}\n\n.logoCenter,\n.lineCenter {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.icon {\n  width: 200px;\n  height: 200px;\n}\n\n.line {\n  height: 2px;\n  width: 22vw;\n  background: #5a49e3;\n}\n\n.hamburgerDiv {\n  position: absolute;\n}\n\n#menuToggle {\n  opacity: 0;\n}\n#menuToggle:checked + .menuToggleBtn > span {\n  transform: rotate(45deg);\n}\n#menuToggle:checked + .menuToggleBtn > span::before {\n  top: 0;\n  transform: rotate(0deg);\n}\n#menuToggle:checked + .menuToggleBtn > span::after {\n  top: 0;\n  transform: rotate(90deg);\n}\n#menuToggle:checked ~ .leftColumn {\n  position: absolute !important;\n  width: 100vw !important;\n  height: 100vw !important;\n}\n\n.menuToggleBtn {\n  position: fixed;\n  top: 20px;\n  left: 20px;\n  width: 26px;\n  height: 26px;\n  cursor: pointer;\n  z-index: 1;\n}\n.menuToggleBtn > span,\n.menuToggleBtn > span::before,\n.menuToggleBtn > span::after {\n  display: block;\n  position: absolute;\n  width: 100%;\n  height: 2px;\n  background-color: #616161;\n  transition-duration: .25s;\n}\n.menuToggleBtn > span::before {\n  content: '';\n  top: -8px;\n}\n.menuToggleBtn > span::after {\n  content: '';\n  top: 8px;\n}"],sourceRoot:""}]);const s=i},800:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),a=t.n(o),r=t(645),i=t.n(r)()(a());i.push([e.id,'.newTask {\n  display: flex;\n  justify-content: flex-end;\n  margin-right: 48px;\n}\n\n.newTaskIcon {\n  height: 18px;\n  width: 18px;\n  margin-top: 36px;\n  cursor: pointer;\n}\n\n.newTaskButton {\n  font-family: "Roboto", sans-serif;\n  margin-top: 36px;\n  border: none;\n  background: none;\n  font-size: 18px;\n  font-weight: 300;\n  color: #0e0080;\n  cursor: pointer;\n}\n',"",{version:3,sources:["webpack://./src/components/styles/new-task-button.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,yBAAyB;EACzB,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,gBAAgB;EAChB,eAAe;AACjB;;AAEA;EACE,iCAAiC;EACjC,gBAAgB;EAChB,YAAY;EACZ,gBAAgB;EAChB,eAAe;EACf,gBAAgB;EAChB,cAAc;EACd,eAAe;AACjB",sourcesContent:['.newTask {\n  display: flex;\n  justify-content: flex-end;\n  margin-right: 48px;\n}\n\n.newTaskIcon {\n  height: 18px;\n  width: 18px;\n  margin-top: 36px;\n  cursor: pointer;\n}\n\n.newTaskButton {\n  font-family: "Roboto", sans-serif;\n  margin-top: 36px;\n  border: none;\n  background: none;\n  font-size: 18px;\n  font-weight: 300;\n  color: #0e0080;\n  cursor: pointer;\n}\n'],sourceRoot:""}]);const s=i},692:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),a=t.n(o),r=t(645),i=t.n(r)()(a());i.push([e.id,'.noTaskContainer {\n  background: #efefef;\n  width: 65vw;\n  height: 40px;\n  margin-left: 48px;\n  margin-top: 48px;\n  border-radius: 5px;\n}\n\n.noTaskText {\n  font-family: "Roboto", sans-serif;\n  font-style: italic;\n  padding: 8px;\n}\n',"",{version:3,sources:["webpack://./src/components/styles/no-tasks.css"],names:[],mappings:"AAAA;EACE,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,iCAAiC;EACjC,kBAAkB;EAClB,YAAY;AACd",sourcesContent:['.noTaskContainer {\n  background: #efefef;\n  width: 65vw;\n  height: 40px;\n  margin-left: 48px;\n  margin-top: 48px;\n  border-radius: 5px;\n}\n\n.noTaskText {\n  font-family: "Roboto", sans-serif;\n  font-style: italic;\n  padding: 8px;\n}\n'],sourceRoot:""}]);const s=i},115:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),a=t.n(o),r=t(645),i=t.n(r)()(a());i.push([e.id,'.projectsTitle {\n  color: #0e0080;\n  font-weight: 500;\n  margin-left: 24px;\n  margin-top: 24px;\n  margin-right: 24px;\n  font-size: calc(12px + 1vw);\n}\n\n.newProjectsContainer {\n  display: flex;\n  gap: 10px;\n  margin-bottom: 48px;\n}\n\n.newProjectIcon {\n  height: 18px;\n  width: 18px;\n  margin-left: 24px;\n  margin-top: 12px;\n  align-self: center;\n}\n\n.newProjectButton {\n  border: none;\n  font-family: "Roboto", sans-serif;\n  font-weight: 300;\n  font-size: calc(8px + 0.8vw);\n  margin-top: 12px;\n  color: #0e0080;\n}\n',"",{version:3,sources:["webpack://./src/components/styles/project-list.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,gBAAgB;EAChB,iBAAiB;EACjB,gBAAgB;EAChB,kBAAkB;EAClB,2BAA2B;AAC7B;;AAEA;EACE,aAAa;EACb,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,iBAAiB;EACjB,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,iCAAiC;EACjC,gBAAgB;EAChB,4BAA4B;EAC5B,gBAAgB;EAChB,cAAc;AAChB",sourcesContent:['.projectsTitle {\n  color: #0e0080;\n  font-weight: 500;\n  margin-left: 24px;\n  margin-top: 24px;\n  margin-right: 24px;\n  font-size: calc(12px + 1vw);\n}\n\n.newProjectsContainer {\n  display: flex;\n  gap: 10px;\n  margin-bottom: 48px;\n}\n\n.newProjectIcon {\n  height: 18px;\n  width: 18px;\n  margin-left: 24px;\n  margin-top: 12px;\n  align-self: center;\n}\n\n.newProjectButton {\n  border: none;\n  font-family: "Roboto", sans-serif;\n  font-weight: 300;\n  font-size: calc(8px + 0.8vw);\n  margin-top: 12px;\n  color: #0e0080;\n}\n'],sourceRoot:""}]);const s=i},184:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),a=t.n(o),r=t(645),i=t.n(r)()(a());i.push([e.id,"#projectName {\n  margin: 24px 0px 24px 24px;\n  border-top: none;\n  border-left: none;\n  border-right: none;\n  border-bottom: solid #5a49e3;\n  background: #efefef;\n  font-size: 18px;\n  width: 200px;\n}\n\n.projectFormButtons {\n  margin-left: 24px;\n  margin-bottom: 24px;\n}\n\n.projectsSaveButton {\n  border: none;\n  font-size: 16px;\n  background: #b3f8b1;\n  border-radius: 2px;\n  padding: 6px;\n  width: 80px;\n  margin-right: 24px;\n}\n\n.projectsCancelButton {\n  border: none;\n  font-size: 16px;\n  background: #f9afaf;\n  border-radius: 2px;\n  padding: 6px;\n  width: 80px;\n}\n\n.createdProjects {\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  margin-left: 24px;\n  margin-bottom: 24px;\n}\n\n.singleProject {\n  display: flex;\n  gap: 10px;\n}\n\n.checklistIcon {\n  height: 24px;\n  width: 24px;\n  margin-top: 24px;\n}\n\n.project {\n  border: none;\n  color: #0e0080;\n  font-weight: 500;\n  font-size: calc(8px + 0.8vw);\n  margin-top: 24px;\n}\n\ntextarea:focus,\ninput:focus {\n  outline: none;\n}\n","",{version:3,sources:["webpack://./src/components/styles/projects.css"],names:[],mappings:"AAAA;EACE,0BAA0B;EAC1B,gBAAgB;EAChB,iBAAiB;EACjB,kBAAkB;EAClB,4BAA4B;EAC5B,mBAAmB;EACnB,eAAe;EACf,YAAY;AACd;;AAEA;EACE,iBAAiB;EACjB,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,mBAAmB;EACnB,kBAAkB;EAClB,YAAY;EACZ,WAAW;EACX,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,mBAAmB;EACnB,kBAAkB;EAClB,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,kBAAkB;EAClB,iBAAiB;EACjB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,SAAS;AACX;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,cAAc;EACd,gBAAgB;EAChB,4BAA4B;EAC5B,gBAAgB;AAClB;;AAEA;;EAEE,aAAa;AACf",sourcesContent:["#projectName {\n  margin: 24px 0px 24px 24px;\n  border-top: none;\n  border-left: none;\n  border-right: none;\n  border-bottom: solid #5a49e3;\n  background: #efefef;\n  font-size: 18px;\n  width: 200px;\n}\n\n.projectFormButtons {\n  margin-left: 24px;\n  margin-bottom: 24px;\n}\n\n.projectsSaveButton {\n  border: none;\n  font-size: 16px;\n  background: #b3f8b1;\n  border-radius: 2px;\n  padding: 6px;\n  width: 80px;\n  margin-right: 24px;\n}\n\n.projectsCancelButton {\n  border: none;\n  font-size: 16px;\n  background: #f9afaf;\n  border-radius: 2px;\n  padding: 6px;\n  width: 80px;\n}\n\n.createdProjects {\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  margin-left: 24px;\n  margin-bottom: 24px;\n}\n\n.singleProject {\n  display: flex;\n  gap: 10px;\n}\n\n.checklistIcon {\n  height: 24px;\n  width: 24px;\n  margin-top: 24px;\n}\n\n.project {\n  border: none;\n  color: #0e0080;\n  font-weight: 500;\n  font-size: calc(8px + 0.8vw);\n  margin-top: 24px;\n}\n\ntextarea:focus,\ninput:focus {\n  outline: none;\n}\n"],sourceRoot:""}]);const s=i},307:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),a=t.n(o),r=t(645),i=t.n(r)()(a());i.push([e.id,'.allFilters {\n  margin-top: 24px;\n  display: flex;\n  flex-direction: column;\n  margin-left: 24px;\n}\n\n.filterListTitle {\n  color: #0e0080;\n  font-weight: 500;\n  font-size: calc(12px + 1vw);\n}\n\n.filter {\n  display: flex;\n  gap: 10px;\n  margin-top: 18px;\n}\n\n.filterButton {\n  border: none;\n  color: #0e0080;\n  font-family: "Roboto", sans-serif;\n  font-weight: 300;\n  font-size: calc(8px + 0.8vw);\n}\n\n.filterIcon {\n  height: 24px;\n  width: 24px;\n}\n',"",{version:3,sources:["webpack://./src/components/styles/task-filters.css"],names:[],mappings:"AAAA;EACE,gBAAgB;EAChB,aAAa;EACb,sBAAsB;EACtB,iBAAiB;AACnB;;AAEA;EACE,cAAc;EACd,gBAAgB;EAChB,2BAA2B;AAC7B;;AAEA;EACE,aAAa;EACb,SAAS;EACT,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,cAAc;EACd,iCAAiC;EACjC,gBAAgB;EAChB,4BAA4B;AAC9B;;AAEA;EACE,YAAY;EACZ,WAAW;AACb",sourcesContent:['.allFilters {\n  margin-top: 24px;\n  display: flex;\n  flex-direction: column;\n  margin-left: 24px;\n}\n\n.filterListTitle {\n  color: #0e0080;\n  font-weight: 500;\n  font-size: calc(12px + 1vw);\n}\n\n.filter {\n  display: flex;\n  gap: 10px;\n  margin-top: 18px;\n}\n\n.filterButton {\n  border: none;\n  color: #0e0080;\n  font-family: "Roboto", sans-serif;\n  font-weight: 300;\n  font-size: calc(8px + 0.8vw);\n}\n\n.filterIcon {\n  height: 24px;\n  width: 24px;\n}\n'],sourceRoot:""}]);const s=i},568:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),a=t.n(o),r=t(645),i=t.n(r)()(a());i.push([e.id,".taskLabels {\n  display: flex;\n  flex: 1 1 0%;\n  justify-content: start;\n  margin-left: 24px;\n  margin-right:48px;\n  margin-top: 48px;\n}\n\n.nameLabel,\n.descriptionLabel,\n.priorityLabel,\n.dueDateLabel,\n.projectLabel {\n  font-weight: 700;\n  font-size: calc(10px + 0.5vw);\n  color: #0e0080;\n}\n\n\n.priorityLabel,\n.dueDateLabel,\n.descriptionLabel,\n.projectLabel {\n  width: calc(80px + 10vw);\n  margin-left: 24px;\n}\n\n.nameLabel {\n  margin-left: 24px;\n  width: calc(140px + 10vw);\n}","",{version:3,sources:["webpack://./src/components/styles/task-labels.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,YAAY;EACZ,sBAAsB;EACtB,iBAAiB;EACjB,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;;;;;EAKE,gBAAgB;EAChB,6BAA6B;EAC7B,cAAc;AAChB;;;AAGA;;;;EAIE,wBAAwB;EACxB,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;EACjB,yBAAyB;AAC3B",sourcesContent:[".taskLabels {\n  display: flex;\n  flex: 1 1 0%;\n  justify-content: start;\n  margin-left: 24px;\n  margin-right:48px;\n  margin-top: 48px;\n}\n\n.nameLabel,\n.descriptionLabel,\n.priorityLabel,\n.dueDateLabel,\n.projectLabel {\n  font-weight: 700;\n  font-size: calc(10px + 0.5vw);\n  color: #0e0080;\n}\n\n\n.priorityLabel,\n.dueDateLabel,\n.descriptionLabel,\n.projectLabel {\n  width: calc(80px + 10vw);\n  margin-left: 24px;\n}\n\n.nameLabel {\n  margin-left: 24px;\n  width: calc(140px + 10vw);\n}"],sourceRoot:""}]);const s=i},710:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),a=t.n(o),r=t(645),i=t.n(r)()(a());i.push([e.id,".task {\n  background: #efefef;\n  flex: 1 1 0%;\n  margin: 24px 48px 24px 48px;\n  border-radius: 5px;\n  height: 80px;\n}\n\n.opacTask {\n  opacity: 0.5;\n}\n\n.taskExpanded {\n  height: 120px;\n}\n\n.taskBtnDiv {\n  display: flex;\n  justify-content: end;\n  align-items: end;\n  position: relative;\n  bottom: 30px;\n  left: 0;\n  right: 0;\n}\n\n.updateBtn, .deleteBtn {\n  margin-right: 12px;\n  margin-bottom: 12px;\n}\n\n.taskDetails {\n  display: flex;\n  align-items: center;\n  height: 100%;\n}\n\n.name, .priority, .projectRef, .due, .description {\n  width: calc(60px + 10vw);\n  margin-left: 24px;\n  margin-right: 12px;\n}\n\n.description {\n  width: calc(80px + 10vw);\n  min-width: 60px;\n}\n\n.description {\n  text-overflow: ellipsis; \n  overflow: hidden; \n  white-space: nowrap;\n}\n\n.checkbox {\n  margin-left: 12px;\n}","",{version:3,sources:["webpack://./src/components/styles/tasks.css"],names:[],mappings:"AAAA;EACE,mBAAmB;EACnB,YAAY;EACZ,2BAA2B;EAC3B,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,oBAAoB;EACpB,gBAAgB;EAChB,kBAAkB;EAClB,YAAY;EACZ,OAAO;EACP,QAAQ;AACV;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,YAAY;AACd;;AAEA;EACE,wBAAwB;EACxB,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,wBAAwB;EACxB,eAAe;AACjB;;AAEA;EACE,uBAAuB;EACvB,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;AACnB",sourcesContent:[".task {\n  background: #efefef;\n  flex: 1 1 0%;\n  margin: 24px 48px 24px 48px;\n  border-radius: 5px;\n  height: 80px;\n}\n\n.opacTask {\n  opacity: 0.5;\n}\n\n.taskExpanded {\n  height: 120px;\n}\n\n.taskBtnDiv {\n  display: flex;\n  justify-content: end;\n  align-items: end;\n  position: relative;\n  bottom: 30px;\n  left: 0;\n  right: 0;\n}\n\n.updateBtn, .deleteBtn {\n  margin-right: 12px;\n  margin-bottom: 12px;\n}\n\n.taskDetails {\n  display: flex;\n  align-items: center;\n  height: 100%;\n}\n\n.name, .priority, .projectRef, .due, .description {\n  width: calc(60px + 10vw);\n  margin-left: 24px;\n  margin-right: 12px;\n}\n\n.description {\n  width: calc(80px + 10vw);\n  min-width: 60px;\n}\n\n.description {\n  text-overflow: ellipsis; \n  overflow: hidden; \n  white-space: nowrap;\n}\n\n.checkbox {\n  margin-left: 12px;\n}"],sourceRoot:""}]);const s=i},257:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),a=t.n(o),r=t(645),i=t.n(r)()(a());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Gemunu+Libre:wght@400;500;700;800&family=Roboto:wght@400;500;700;900&display=swap);"]),i.push([e.id,'body,\np,\nh2,\nh3 {\n  margin: 0;\n  font-family: "Roboto", Verdana, Geneva, Tahoma, sans-serif;\n}\n\n.hidden {\n  display: none !important;\n}\n',"",{version:3,sources:["webpack://./src/global-style.css"],names:[],mappings:"AAEA;;;;EAIE,SAAS;EACT,0DAA0D;AAC5D;;AAEA;EACE,wBAAwB;AAC1B",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Gemunu+Libre:wght@400;500;700;800&family=Roboto:wght@400;500;700;900&display=swap");\n\nbody,\np,\nh2,\nh3 {\n  margin: 0;\n  font-family: "Roboto", Verdana, Geneva, Tahoma, sans-serif;\n}\n\n.hidden {\n  display: none !important;\n}\n'],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,a,r){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(i[d]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);o&&i[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),n.push(c))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(a," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([r]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var r={},i=[],s=0;s<e.length;s++){var d=e[s],l=o.base?d[0]+o.base:d[0],c=r[l]||0,u="".concat(l," ").concat(c);r[l]=c+1;var m=t(u),A={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==m)n[m].references++,n[m].updater(A);else{var p=a(A,o);o.byIndex=s,n.splice(s,0,{identifier:u,updater:p,references:1})}i.push(u)}return i}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var r=o(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<r.length;i++){var s=t(r[i]);n[s].references--}for(var d=o(e,a),l=0;l<r.length;l++){var c=t(r[l]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}r=d}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,a&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(o){var a=n[o];if(void 0!==a)return a.exports;var r=n[o]={id:o,exports:{}};return e[o](r,r.exports,t),r.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");o.length&&(e=o[o.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.nc=void 0;var o={};(()=>{t.d(o,{w:()=>cn});var e=t(379),n=t.n(e),a=t(795),r=t.n(a),i=t(569),s=t.n(i),d=t(565),l=t.n(d),c=t(216),u=t.n(c),m=t(589),A=t.n(m),p=t(257),h={};h.styleTagTransform=A(),h.setAttributes=l(),h.insert=s().bind(null,"head"),h.domAPI=r(),h.insertStyleElement=u(),n()(p.Z,h),p.Z&&p.Z.locals&&p.Z.locals;var f=t(184),g={};g.styleTagTransform=A(),g.setAttributes=l(),g.insert=s().bind(null,"head"),g.domAPI=r(),g.insertStyleElement=u(),n()(f.Z,g),f.Z&&f.Z.locals&&f.Z.locals;var C=t(710),v={};function B(e){let{element:n,className:t,domId:o,domText:a,domSrc:r,domAlt:i,domHref:s,domType:d,domName:l,domValue:c,domPlaceholder:u}=e;const m=document.createElement(n);return void 0!==t&&m.classList.add(t),void 0!==o&&(m.id=o),void 0!==a&&(m.innerText=a),void 0!==r&&(m.src=r),void 0!==i&&(m.alt=i),void 0!==s&&(m.href=s),void 0!==d&&(m.type=d),void 0!==l&&(m.name=l),void 0!==c&&(m.value=c),"unedefined"!=typeof u&&(m.placeholder=u),m}v.styleTagTransform=A(),v.setAttributes=l(),v.insert=s().bind(null,"head"),v.domAPI=r(),v.insertStyleElement=u(),n()(C.Z,v),C.Z&&C.Z.locals&&C.Z.locals;const b=t.p+"5747a3ad394644d3759a.png";var E=t(307),w={};w.styleTagTransform=A(),w.setAttributes=l(),w.insert=s().bind(null,"head"),w.domAPI=r(),w.insertStyleElement=u(),n()(E.Z,w),E.Z&&E.Z.locals&&E.Z.locals;const x=t.p+"b41f862dbe35dfd954db.png",y=t.p+"72bcc03ea6db208037b8.png",k=t.p+"ce7b488d9ed9b13632e2.png",T=t.p+"9ec0e4aa5247a5494c9b.png",j=t.p+"71721b18f499ba09b1eb.png";var D=t(115),N={};N.styleTagTransform=A(),N.setAttributes=l(),N.insert=s().bind(null,"head"),N.domAPI=r(),N.insertStyleElement=u(),n()(D.Z,N),D.Z&&D.Z.locals&&D.Z.locals;var S=t(692),L={};L.styleTagTransform=A(),L.setAttributes=l(),L.insert=s().bind(null,"head"),L.domAPI=r(),L.insertStyleElement=u(),n()(S.Z,L),S.Z&&S.Z.locals&&S.Z.locals;var I=t(800),P={};P.styleTagTransform=A(),P.setAttributes=l(),P.insert=s().bind(null,"head"),P.domAPI=r(),P.insertStyleElement=u(),n()(I.Z,P),I.Z&&I.Z.locals&&I.Z.locals;var M=t(188),Y={};Y.styleTagTransform=A(),Y.setAttributes=l(),Y.insert=s().bind(null,"head"),Y.domAPI=r(),Y.insertStyleElement=u(),n()(M.Z,Y),M.Z&&M.Z.locals&&M.Z.locals;var W=t(568),Z={};Z.styleTagTransform=A(),Z.setAttributes=l(),Z.insert=s().bind(null,"head"),Z.domAPI=r(),Z.insertStyleElement=u(),n()(W.Z,Z),W.Z&&W.Z.locals&&W.Z.locals;var U=t(172),z={};z.styleTagTransform=A(),z.setAttributes=l(),z.insert=s().bind(null,"head"),z.domAPI=r(),z.insertStyleElement=u(),n()(U.Z,z),U.Z&&U.Z.locals&&U.Z.locals;var O=t(297),H={};function R(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function F(e){return F="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},F(e)}function q(e){return R(1,arguments),e instanceof Date||"object"===F(e)&&"[object Date]"===Object.prototype.toString.call(e)}function X(e){return X="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},X(e)}function V(e){R(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"===X(e)&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function G(e){if(R(1,arguments),!q(e)&&"number"!=typeof e)return!1;var n=V(e);return!isNaN(Number(n))}function Q(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function J(e,n){R(2,arguments);var t=V(e).getTime(),o=Q(n);return new Date(t+o)}function _(e,n){R(2,arguments);var t=Q(n);return J(e,-t)}H.styleTagTransform=A(),H.setAttributes=l(),H.insert=s().bind(null,"head"),H.domAPI=r(),H.insertStyleElement=u(),n()(O.Z,H),O.Z&&O.Z.locals&&O.Z.locals;var $=864e5;function K(e){R(1,arguments);var n=1,t=V(e),o=t.getUTCDay(),a=(o<n?7:0)+o-n;return t.setUTCDate(t.getUTCDate()-a),t.setUTCHours(0,0,0,0),t}function ee(e){R(1,arguments);var n=V(e),t=n.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(t+1,0,4),o.setUTCHours(0,0,0,0);var a=K(o),r=new Date(0);r.setUTCFullYear(t,0,4),r.setUTCHours(0,0,0,0);var i=K(r);return n.getTime()>=a.getTime()?t+1:n.getTime()>=i.getTime()?t:t-1}function ne(e){R(1,arguments);var n=ee(e),t=new Date(0);t.setUTCFullYear(n,0,4),t.setUTCHours(0,0,0,0);var o=K(t);return o}var te=6048e5,oe={};function ae(){return oe}function re(e,n){var t,o,a,r,i,s,d,l;R(1,arguments);var c=ae(),u=Q(null!==(t=null!==(o=null!==(a=null!==(r=null==n?void 0:n.weekStartsOn)&&void 0!==r?r:null==n||null===(i=n.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==a?a:c.weekStartsOn)&&void 0!==o?o:null===(d=c.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==t?t:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=V(e),A=m.getUTCDay(),p=(A<u?7:0)+A-u;return m.setUTCDate(m.getUTCDate()-p),m.setUTCHours(0,0,0,0),m}function ie(e,n){var t,o,a,r,i,s,d,l;R(1,arguments);var c=V(e),u=c.getUTCFullYear(),m=ae(),A=Q(null!==(t=null!==(o=null!==(a=null!==(r=null==n?void 0:n.firstWeekContainsDate)&&void 0!==r?r:null==n||null===(i=n.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==a?a:m.firstWeekContainsDate)&&void 0!==o?o:null===(d=m.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==t?t:1);if(!(A>=1&&A<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var p=new Date(0);p.setUTCFullYear(u+1,0,A),p.setUTCHours(0,0,0,0);var h=re(p,n),f=new Date(0);f.setUTCFullYear(u,0,A),f.setUTCHours(0,0,0,0);var g=re(f,n);return c.getTime()>=h.getTime()?u+1:c.getTime()>=g.getTime()?u:u-1}function se(e,n){var t,o,a,r,i,s,d,l;R(1,arguments);var c=ae(),u=Q(null!==(t=null!==(o=null!==(a=null!==(r=null==n?void 0:n.firstWeekContainsDate)&&void 0!==r?r:null==n||null===(i=n.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==a?a:c.firstWeekContainsDate)&&void 0!==o?o:null===(d=c.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==t?t:1),m=ie(e,n),A=new Date(0);A.setUTCFullYear(m,0,u),A.setUTCHours(0,0,0,0);var p=re(A,n);return p}var de=6048e5;function le(e,n){for(var t=e<0?"-":"",o=Math.abs(e).toString();o.length<n;)o="0"+o;return t+o}const ce=function(e,n){var t=e.getUTCFullYear(),o=t>0?t:1-t;return le("yy"===n?o%100:o,n.length)},ue=function(e,n){var t=e.getUTCMonth();return"M"===n?String(t+1):le(t+1,2)},me=function(e,n){return le(e.getUTCDate(),n.length)},Ae=function(e,n){return le(e.getUTCHours()%12||12,n.length)},pe=function(e,n){return le(e.getUTCHours(),n.length)},he=function(e,n){return le(e.getUTCMinutes(),n.length)},fe=function(e,n){return le(e.getUTCSeconds(),n.length)},ge=function(e,n){var t=n.length,o=e.getUTCMilliseconds();return le(Math.floor(o*Math.pow(10,t-3)),n.length)};var Ce={G:function(e,n,t){var o=e.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return t.era(o,{width:"abbreviated"});case"GGGGG":return t.era(o,{width:"narrow"});default:return t.era(o,{width:"wide"})}},y:function(e,n,t){if("yo"===n){var o=e.getUTCFullYear(),a=o>0?o:1-o;return t.ordinalNumber(a,{unit:"year"})}return ce(e,n)},Y:function(e,n,t,o){var a=ie(e,o),r=a>0?a:1-a;return"YY"===n?le(r%100,2):"Yo"===n?t.ordinalNumber(r,{unit:"year"}):le(r,n.length)},R:function(e,n){return le(ee(e),n.length)},u:function(e,n){return le(e.getUTCFullYear(),n.length)},Q:function(e,n,t){var o=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"Q":return String(o);case"QQ":return le(o,2);case"Qo":return t.ordinalNumber(o,{unit:"quarter"});case"QQQ":return t.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(o,{width:"narrow",context:"formatting"});default:return t.quarter(o,{width:"wide",context:"formatting"})}},q:function(e,n,t){var o=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"q":return String(o);case"qq":return le(o,2);case"qo":return t.ordinalNumber(o,{unit:"quarter"});case"qqq":return t.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(o,{width:"narrow",context:"standalone"});default:return t.quarter(o,{width:"wide",context:"standalone"})}},M:function(e,n,t){var o=e.getUTCMonth();switch(n){case"M":case"MM":return ue(e,n);case"Mo":return t.ordinalNumber(o+1,{unit:"month"});case"MMM":return t.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(o,{width:"narrow",context:"formatting"});default:return t.month(o,{width:"wide",context:"formatting"})}},L:function(e,n,t){var o=e.getUTCMonth();switch(n){case"L":return String(o+1);case"LL":return le(o+1,2);case"Lo":return t.ordinalNumber(o+1,{unit:"month"});case"LLL":return t.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(o,{width:"narrow",context:"standalone"});default:return t.month(o,{width:"wide",context:"standalone"})}},w:function(e,n,t,o){var a=function(e,n){R(1,arguments);var t=V(e),o=re(t,n).getTime()-se(t,n).getTime();return Math.round(o/de)+1}(e,o);return"wo"===n?t.ordinalNumber(a,{unit:"week"}):le(a,n.length)},I:function(e,n,t){var o=function(e){R(1,arguments);var n=V(e),t=K(n).getTime()-ne(n).getTime();return Math.round(t/te)+1}(e);return"Io"===n?t.ordinalNumber(o,{unit:"week"}):le(o,n.length)},d:function(e,n,t){return"do"===n?t.ordinalNumber(e.getUTCDate(),{unit:"date"}):me(e,n)},D:function(e,n,t){var o=function(e){R(1,arguments);var n=V(e),t=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var o=n.getTime(),a=t-o;return Math.floor(a/$)+1}(e);return"Do"===n?t.ordinalNumber(o,{unit:"dayOfYear"}):le(o,n.length)},E:function(e,n,t){var o=e.getUTCDay();switch(n){case"E":case"EE":case"EEE":return t.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},e:function(e,n,t,o){var a=e.getUTCDay(),r=(a-o.weekStartsOn+8)%7||7;switch(n){case"e":return String(r);case"ee":return le(r,2);case"eo":return t.ordinalNumber(r,{unit:"day"});case"eee":return t.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(a,{width:"short",context:"formatting"});default:return t.day(a,{width:"wide",context:"formatting"})}},c:function(e,n,t,o){var a=e.getUTCDay(),r=(a-o.weekStartsOn+8)%7||7;switch(n){case"c":return String(r);case"cc":return le(r,n.length);case"co":return t.ordinalNumber(r,{unit:"day"});case"ccc":return t.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(a,{width:"narrow",context:"standalone"});case"cccccc":return t.day(a,{width:"short",context:"standalone"});default:return t.day(a,{width:"wide",context:"standalone"})}},i:function(e,n,t){var o=e.getUTCDay(),a=0===o?7:o;switch(n){case"i":return String(a);case"ii":return le(a,n.length);case"io":return t.ordinalNumber(a,{unit:"day"});case"iii":return t.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},a:function(e,n,t){var o=e.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(e,n,t){var o,a=e.getUTCHours();switch(o=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",n){case"b":case"bb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(e,n,t){var o,a=e.getUTCHours();switch(o=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",n){case"B":case"BB":case"BBB":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(e,n,t){if("ho"===n){var o=e.getUTCHours()%12;return 0===o&&(o=12),t.ordinalNumber(o,{unit:"hour"})}return Ae(e,n)},H:function(e,n,t){return"Ho"===n?t.ordinalNumber(e.getUTCHours(),{unit:"hour"}):pe(e,n)},K:function(e,n,t){var o=e.getUTCHours()%12;return"Ko"===n?t.ordinalNumber(o,{unit:"hour"}):le(o,n.length)},k:function(e,n,t){var o=e.getUTCHours();return 0===o&&(o=24),"ko"===n?t.ordinalNumber(o,{unit:"hour"}):le(o,n.length)},m:function(e,n,t){return"mo"===n?t.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):he(e,n)},s:function(e,n,t){return"so"===n?t.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):fe(e,n)},S:function(e,n){return ge(e,n)},X:function(e,n,t,o){var a=(o._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(n){case"X":return Be(a);case"XXXX":case"XX":return be(a);default:return be(a,":")}},x:function(e,n,t,o){var a=(o._originalDate||e).getTimezoneOffset();switch(n){case"x":return Be(a);case"xxxx":case"xx":return be(a);default:return be(a,":")}},O:function(e,n,t,o){var a=(o._originalDate||e).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+ve(a,":");default:return"GMT"+be(a,":")}},z:function(e,n,t,o){var a=(o._originalDate||e).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+ve(a,":");default:return"GMT"+be(a,":")}},t:function(e,n,t,o){var a=o._originalDate||e;return le(Math.floor(a.getTime()/1e3),n.length)},T:function(e,n,t,o){return le((o._originalDate||e).getTime(),n.length)}};function ve(e,n){var t=e>0?"-":"+",o=Math.abs(e),a=Math.floor(o/60),r=o%60;if(0===r)return t+String(a);var i=n||"";return t+String(a)+i+le(r,2)}function Be(e,n){return e%60==0?(e>0?"-":"+")+le(Math.abs(e)/60,2):be(e,n)}function be(e,n){var t=n||"",o=e>0?"-":"+",a=Math.abs(e);return o+le(Math.floor(a/60),2)+t+le(a%60,2)}const Ee=Ce;var we=function(e,n){switch(e){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});default:return n.date({width:"full"})}},xe=function(e,n){switch(e){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});default:return n.time({width:"full"})}};const ye={p:xe,P:function(e,n){var t,o=e.match(/(P+)(p+)?/)||[],a=o[1],r=o[2];if(!r)return we(e,n);switch(a){case"P":t=n.dateTime({width:"short"});break;case"PP":t=n.dateTime({width:"medium"});break;case"PPP":t=n.dateTime({width:"long"});break;default:t=n.dateTime({width:"full"})}return t.replace("{{date}}",we(a,n)).replace("{{time}}",xe(r,n))}};function ke(e){var n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),e.getTime()-n.getTime()}var Te=["D","DD"],je=["YY","YYYY"];function De(e){return-1!==Te.indexOf(e)}function Ne(e){return-1!==je.indexOf(e)}function Se(e,n,t){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var Le={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function Ie(e){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.width?String(n.width):e.defaultWidth,o=e.formats[t]||e.formats[e.defaultWidth];return o}}const Pe={date:Ie({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:Ie({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:Ie({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var Me={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Ye(e){return function(n,t){var o;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&e.formattingValues){var a=e.defaultFormattingWidth||e.defaultWidth,r=null!=t&&t.width?String(t.width):a;o=e.formattingValues[r]||e.formattingValues[a]}else{var i=e.defaultWidth,s=null!=t&&t.width?String(t.width):e.defaultWidth;o=e.values[s]||e.values[i]}return o[e.argumentCallback?e.argumentCallback(n):n]}}const We={ordinalNumber:function(e,n){var t=Number(e),o=t%100;if(o>20||o<10)switch(o%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:Ye({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Ye({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:Ye({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Ye({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Ye({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Ze(e){return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=t.width,a=o&&e.matchPatterns[o]||e.matchPatterns[e.defaultMatchWidth],r=n.match(a);if(!r)return null;var i,s=r[0],d=o&&e.parsePatterns[o]||e.parsePatterns[e.defaultParseWidth],l=Array.isArray(d)?ze(d,(function(e){return e.test(s)})):Ue(d,(function(e){return e.test(s)}));i=e.valueCallback?e.valueCallback(l):l,i=t.valueCallback?t.valueCallback(i):i;var c=n.slice(s.length);return{value:i,rest:c}}}function Ue(e,n){for(var t in e)if(e.hasOwnProperty(t)&&n(e[t]))return t}function ze(e,n){for(var t=0;t<e.length;t++)if(n(e[t]))return t}var Oe,He={ordinalNumber:(Oe={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.match(Oe.matchPattern);if(!t)return null;var o=t[0],a=e.match(Oe.parsePattern);if(!a)return null;var r=Oe.valueCallback?Oe.valueCallback(a[0]):a[0];r=n.valueCallback?n.valueCallback(r):r;var i=e.slice(o.length);return{value:r,rest:i}}),era:Ze({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Ze({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:Ze({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Ze({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Ze({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const Re={code:"en-US",formatDistance:function(e,n,t){var o,a=Le[e];return o="string"==typeof a?a:1===n?a.one:a.other.replace("{{count}}",n.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+o:o+" ago":o},formatLong:Pe,formatRelative:function(e,n,t,o){return Me[e]},localize:We,match:He,options:{weekStartsOn:0,firstWeekContainsDate:1}};var Fe=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,qe=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Xe=/^'([^]*?)'?$/,Ve=/''/g,Ge=/[a-zA-Z]/;function Qe(e){var n=e.match(Xe);return n?n[1].replace(Ve,"'"):e}function Je(e,n){var t,o,a,r,i,s,d,l;R(1,arguments);var c=ae(),u=Q(null!==(t=null!==(o=null!==(a=null!==(r=null==n?void 0:n.weekStartsOn)&&void 0!==r?r:null==n||null===(i=n.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==a?a:c.weekStartsOn)&&void 0!==o?o:null===(d=c.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==t?t:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=V(e),A=m.getDay(),p=(A<u?7:0)+A-u;return m.setDate(m.getDate()-p),m.setHours(0,0,0,0),m}function _e(e,n,t){R(2,arguments);var o=Je(e,t),a=Je(n,t);return o.getTime()===a.getTime()}function $e(e,n){const t=document.getElementById("formDiv"),o=document.getElementById("noTask");o.classList.contains("hidden")||o.classList.add("hidden"),document.querySelectorAll(".task").forEach((e=>e.remove()));for(let o=0;o<e.length;o++){const a=B({element:"div",className:"task"});t.insertAdjacentElement("beforebegin",a);const r=B({element:"div",className:"taskDetails"});a.appendChild(r);const i=B({element:"input",domType:"checkbox",domName:"complete",className:"checkbox"});e[o].complete?i.setAttribute("checked","checked"):i.removeAttribute("checked"),r.appendChild(i);const s=B({element:"p",className:"name",domText:e[o].name});r.appendChild(s);const d=B({element:"p",className:"description",domText:e[o].description});r.appendChild(d);const l=B({element:"p",className:"priority",domText:e[o].priority});r.appendChild(l);const c=B({element:"p",className:"projectRef",domText:e[o].project});r.appendChild(c);const u=B({element:"time",className:"due",domText:e[o].due});r.appendChild(u);const m=B({element:"div",className:"taskBtnDiv"});a.appendChild(m);const A=B({element:"button",className:"updateBtn",domText:"Update"});m.appendChild(A);const p=B({element:"button",className:"deleteBtn",domText:"Delete"});m.appendChild(p),m.classList.add("hidden"),i.addEventListener("change",(()=>{i.checked?(e[o].complete=!0,a.classList.add("hidden"),i.setAttribute("checked","checked"),localStorage.setItem("tasks",JSON.stringify(e))):(e[o].complete=!1,a.classList.add("hidden"),i.setAttribute("checked","unchecked"),localStorage.setItem("tasks",JSON.stringify(e)))})),s.addEventListener("click",(()=>{a.classList.contains("taskExpanded")?(a.classList.remove("taskExpanded"),m.classList.add("hidden")):(a.classList.add("taskExpanded"),m.classList.remove("hidden"))})),A.addEventListener("click",(()=>{A.classList.add("hidden");const t=[s,d,l,c,u,i];t.forEach((e=>{e.classList.add("hidden")})),p.classList.add("hidden");const a=B({element:"form",className:"updateDiv",domId:"updateDiv"});r.appendChild(a);const m=B({element:"input",domType:"text",domId:"updateTaskName",domName:"taskName",domValue:e[o].name});m.setAttribute("required","required"),m.setAttribute("maxlength","20"),a.appendChild(m);const h=B({element:"input",domType:"text",domId:"updateTaskDescription",domName:"updateTaskDescription",domValue:e[o].description});h.setAttribute("required","required"),h.setAttribute("maxlength","20"),a.appendChild(h);const f=B({element:"select",domId:"updateTaskPriority",domName:"updateTaskPriority",domValue:e[o].priority}),g=B({element:"option",domValue:"low",domText:"Low"});"low"===e[o].priority&&g.setAttribute("selected","selected"),f.appendChild(g);const C=B({element:"option",domValue:"medium",domText:"Medium"});"medium"===e[o].priority&&C.setAttribute("selected","selected"),f.appendChild(C);const v=B({element:"option",domValue:"high",domText:"High"});"high"===e[o].priority&&v.setAttribute("selected","selected"),f.appendChild(v),a.appendChild(f);const b=B({element:"select",domId:"taskProject",domName:"project"});for(let t=0;t<n.length;t++){let a=B({element:"option",domValue:n[t],domText:n[t]});n[t]===e[o].project&&a.setAttribute("selected","selected"),b.appendChild(a)}a.appendChild(b);const E=B({element:"input",domId:"dueDate",domType:"date",domValue:e[o].due});a.appendChild(E);const w=B({element:"button",domType:"submit",domId:"updateSave",domText:"Save"});a.appendChild(w),a.addEventListener("submit",(n=>{n.preventDefault();const r=cn.findIndex((n=>n.id===e[o].id));e[r].name=m.value,e[r].description=h.value,e[r].priority=f.value,e[r].project=b.value,e[r].due=E.value,s.innerHTML=m.value,d.innerHTML=h.value,l.innerHTML=f.value,c.innerHTML=b.value,u.innerHTML=E.value,a.classList.add("hidden"),A.classList.remove("hidden"),p.classList.remove("hidden"),t.forEach((e=>{e.classList.remove("hidden")})),localStorage.setItem("tasks",JSON.stringify(cn))}))})),p.addEventListener("click",(()=>{const n=cn.findIndex((n=>n.id===e[o].id));cn.splice(n,1),localStorage.setItem("tasks",JSON.stringify(cn)),a.remove()}))}}function Ke(e,n,t){const o=function(e,n,t){var o,a,r,i,s,d,l,c,u,m,A,p,h,f,g,C,v,B;R(2,arguments);var b=String(n),E=ae(),w=null!==(o=null!==(a=null==t?void 0:t.locale)&&void 0!==a?a:E.locale)&&void 0!==o?o:Re,x=Q(null!==(r=null!==(i=null!==(s=null!==(d=null==t?void 0:t.firstWeekContainsDate)&&void 0!==d?d:null==t||null===(l=t.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==s?s:E.firstWeekContainsDate)&&void 0!==i?i:null===(u=E.locale)||void 0===u||null===(m=u.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==r?r:1);if(!(x>=1&&x<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var y=Q(null!==(A=null!==(p=null!==(h=null!==(f=null==t?void 0:t.weekStartsOn)&&void 0!==f?f:null==t||null===(g=t.locale)||void 0===g||null===(C=g.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==h?h:E.weekStartsOn)&&void 0!==p?p:null===(v=E.locale)||void 0===v||null===(B=v.options)||void 0===B?void 0:B.weekStartsOn)&&void 0!==A?A:0);if(!(y>=0&&y<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!w.localize)throw new RangeError("locale must contain localize property");if(!w.formatLong)throw new RangeError("locale must contain formatLong property");var k=V(e);if(!G(k))throw new RangeError("Invalid time value");var T=ke(k),j=_(k,T),D={firstWeekContainsDate:x,weekStartsOn:y,locale:w,_originalDate:k};return b.match(qe).map((function(e){var n=e[0];return"p"===n||"P"===n?(0,ye[n])(e,w.formatLong):e})).join("").match(Fe).map((function(o){if("''"===o)return"'";var a=o[0];if("'"===a)return Qe(o);var r=Ee[a];if(r)return null!=t&&t.useAdditionalWeekYearTokens||!Ne(o)||Se(o,n,String(e)),null!=t&&t.useAdditionalDayOfYearTokens||!De(o)||Se(o,n,String(e)),r(j,o,w.localize,D);if(a.match(Ge))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return o})).join("")}(Date.now(),"yyyy-MM-dd"),a=document.getElementById("taskProject");if("main"===n)$e(e.filter((e=>0==e.complete)),t),a.value="No project";else if("due today"===n)$e(e.filter((e=>e.due==o&&0==e.complete)),t),a.value="No project";else if("due this week"===n){let n=e.filter((e=>function(e,n){return R(1,arguments),_e(e,Date.now(),n)}(Date.parse(e.due))&&0==e.complete));$e(n,t),a.value="No project"}else"complete"===n?$e(e.filter((e=>1==e.complete)),t):($e(e.filter((e=>e.project===n&&0==e.complete)),t),a.value=n)}function en(e){const n=document.getElementById("filterTitle"),t=document.getElementById("filterDescription");"main"===e?(n.innerHTML="All tasks",t.innerHTML="Here are all your tasks"):"due today"===e?(n.innerHTML="Due today",t.innerHTML="Here are your tasks due today"):"due this week"===e?(n.innerHTML="Due this week",t.innerHTML="Here are your tasks due this week"):"complete"===e?(n.innerHTML="Completed tasks",t.innerHTML="Here are your completed tasks"):(n.innerHTML=e,t.innerHTML=`Here are your tasks for the ${e} project`)}const nn=t.p+"0d20e3d17f145a0ac6f5.png";function tn(e,n,t,o){const a=document.getElementById("menuToggle"),r=B({element:"div",className:"singleProject"}),i=B({element:"img",domSrc:nn,className:"checklistIcon"}),s=B({element:"button",className:"project",domText:o}),d=document.getElementById("createdProjects"),l=document.getElementById("taskProject"),c=document.getElementById("leftColumn");r.appendChild(i),r.appendChild(s),d.appendChild(r),s.addEventListener("click",(()=>{window.innerWidth<700&&c.classList.add("hidden"),a.checked=!1,t=s.innerHTML,Ke(e,t,n),en(t),l.value=t}))}const on={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let an;const rn=new Uint8Array(16);function sn(){if(!an&&(an="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!an))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return an(rn)}const dn=[];for(let e=0;e<256;++e)dn.push((e+256).toString(16).slice(1));const ln=function(e,n,t){if(on.randomUUID&&!n&&!e)return on.randomUUID();const o=(e=e||{}).random||(e.rng||sn)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,n){t=t||0;for(let e=0;e<16;++e)n[t+e]=o[e];return n}return function(e,n=0){return(dn[e[n+0]]+dn[e[n+1]]+dn[e[n+2]]+dn[e[n+3]]+"-"+dn[e[n+4]]+dn[e[n+5]]+"-"+dn[e[n+6]]+dn[e[n+7]]+"-"+dn[e[n+8]]+dn[e[n+9]]+"-"+dn[e[n+10]]+dn[e[n+11]]+dn[e[n+12]]+dn[e[n+13]]+dn[e[n+14]]+dn[e[n+15]]).toLowerCase()}(o)};!function(){const e=document.getElementById("content"),n=B({element:"div",className:"leftColumn",domId:"leftColumn"});e.appendChild(n);const t=B({element:"div",className:"rightColumn",domId:"rightColumn"});e.appendChild(t);const o=B({element:"div",className:"header",domId:"header"});t.appendChild(o);const a=B({element:"div",className:"hamburgerDiv",domId:"hamburgerDiv"}),r=B({element:"input",domId:"menuToggle",domType:"checkbox"});a.appendChild(r);const i=B({element:"label",className:"menuToggleBtn"});i.setAttribute("for","menuToggle"),a.appendChild(i);const s=B({element:"span"});i.appendChild(s),o.appendChild(a);const d=B({element:"div",className:"logoCenter"});n.appendChild(d),d.appendChild(B({element:"img",domSrc:b,domAlt:"To do",className:"icon"}));const l=B({element:"div",className:"lineCenter"});n.appendChild(l);const c=B({element:"div",className:"line"});l.appendChild(c),n.appendChild(function(){const e=B({element:"div",className:"allFilters"}),n=B({element:"h2",className:"filterListTitle",domText:"Filters"});e.appendChild(n);const t=B({element:"div",className:"filter"});e.appendChild(t);const o=B({element:"img",className:"filterIcon",domSrc:x,domAlt:"folder"});t.appendChild(o);const a=B({element:"button",className:"filterButton",domId:"allTasks",domText:"All tasks"});t.appendChild(a);const r=B({element:"div",className:"filter"});e.appendChild(r);const i=B({element:"img",className:"filterIcon",domSrc:y,domAlt:"Day calendar"});r.appendChild(i);const s=B({element:"button",className:"filterButton",domId:"dueToday",domText:"Due today"});r.appendChild(s);const d=B({element:"div",className:"filter"});e.appendChild(d);const l=B({element:"img",className:"filterIcon",domSrc:k,domAlt:"Week calendar"});d.appendChild(l);const c=B({element:"button",className:"filterButton",domId:"dueThisWeek",domText:"Due this week"});d.appendChild(c);const u=B({element:"div",className:"filter"});e.appendChild(u);const m=B({element:"img",className:"filterIcon",domSrc:T,domAlt:"Trash bag"});u.appendChild(m);const A=B({element:"button",className:"filterButton",domId:"completedTasksFilter",domText:"Complete"});return u.appendChild(A),e}()),n.appendChild(function(){const e=B({element:"div",className:"projectsList"}),n=B({element:"h2",className:"projectsTitle",domText:"Projects",domId:"projectsTitle"});e.appendChild(n);const t=B({element:"div",className:"newProjectsContainer",domId:"newProjectsContainer"});e.appendChild(t);const o=B({element:"img",className:"newProjectIcon",domSrc:j,domAlt:"Plus sign"});t.appendChild(o);const a=B({element:"button",className:"newProjectButton",domText:"Add project",domId:"newProject"});return t.appendChild(a),e}()),o.appendChild(function(){const e=B({element:"div",className:"filterTitle"}),n=B({element:"h2",className:"title",domText:"All tasks",domId:"filterTitle"});e.appendChild(n);const t=B({element:"h3",className:"filterDescription",domText:"Here are all your tasks",domId:"filterDescription"});return e.appendChild(t),e}()),t.appendChild(function(){const e=B({element:"div",className:"taskLabels",domId:"taskLabelsDiv"}),n=B({element:"p",className:"nameLabel",domText:"Task:"});e.appendChild(n);const t=B({element:"p",className:"descriptionLabel",domText:"Description:"});e.appendChild(t);const o=B({element:"p",className:"priorityLabel",domText:"Priority:"});e.appendChild(o);const a=B({element:"p",className:"projectLabel",domText:"Project:"});e.appendChild(a);const r=B({element:"p",className:"dueDateLabel",domText:"Due:"});return e.appendChild(r),e}()),t.appendChild(function(){const e=B({element:"div",className:"taskForm",domId:"formDiv"}),n=B({element:"form",domId:"newTaskForm"});e.appendChild(n);const t=B({element:"div",className:"inputs"});n.appendChild(t);const o=B({element:"input",domType:"text",domId:"taskName",domName:"taskName",domPlaceholder:"Task name..."});o.setAttribute("required","required"),o.setAttribute("maxlength","20"),t.appendChild(o);const a=B({element:"input",domType:"text",domId:"taskDescription",domName:"taskDescription",domPlaceholder:"Task description..."});a.setAttribute("required","required"),a.setAttribute("maxlength","60"),t.appendChild(a);const r=B({element:"select",domId:"priority",domName:"priority"}),i=B({element:"option",domValue:"low",domText:"Low"});r.appendChild(i);const s=B({element:"option",domValue:"medium",domText:"Medium"});r.appendChild(s);const d=B({element:"option",domValue:"high",domText:"High"});r.appendChild(d),t.appendChild(r);const l=B({element:"select",domId:"taskProject",domName:"project"});t.appendChild(l);const c=B({element:"input",domId:"dueDate",domType:"date"});t.appendChild(c);const u=B({element:"div",className:"formButtons"});n.appendChild(u);const m=B({element:"input",className:"saveButton",domType:"submit",domValue:"Save"});u.appendChild(m);const A=B({element:"button",className:"cancelButton",domType:"button",domText:"Cancel",domId:"cancelBtn"});return u.appendChild(A),e.classList.add("hidden"),e}()),t.appendChild(function(){const e=B({element:"div",className:"noTaskContainer",domId:"noTask"}),n=B({element:"p",className:"noTaskText",domText:"Hooray! You have no more tasks..."});return e.appendChild(n),e}()),t.appendChild(function(){const e=B({element:"div",className:"newTask",domId:"newTaskDiv"}),n=B({element:"img",className:"newTaskIcon",domSrc:j,domAlt:"plus icon"});e.appendChild(n);const t=B({element:"button",className:"newTaskButton",domId:"newTask",domText:"Add task"});return e.appendChild(t),e}())}(),function(){const e=document.getElementById("newTask"),n=document.getElementById("cancelBtn"),t=document.getElementById("formDiv"),o=document.getElementById("taskName"),a=document.getElementById("taskDescription"),r=document.getElementById("dueDate");e.addEventListener("click",(()=>{t.classList.contains("hidden")?t.classList.remove("hidden"):t.classList.add("hidden")})),n.addEventListener("click",(()=>{t.classList.add("hidden"),o.value=null,a.value=null,r.value=null}))}(),function(){const e=document.getElementById("leftColumn"),n=document.getElementById("rightColumn"),t=document.getElementById("header"),o=document.getElementById("hamburgerDiv"),a=document.getElementById("menuToggle");window.innerWidth<700?(e.classList.add("hidden"),o.classList.remove("hidden"),n.style.width="100vw",t.style.width="100vw"):(e.classList.remove("hidden"),o.classList.add("hidden"),n.style.width="75vw",t.style.width="75vw"),window.addEventListener("resize",(()=>{window.innerWidth<700?(e.classList.add("hidden"),o.classList.remove("hidden"),n.style.width="100vw",a.checked=!1,t.style.width="100vw"):(e.classList.remove("hidden"),o.classList.add("hidden"),n.style.width="75vw",t.style.width="75vw",a.checked=!1)})),a.addEventListener("change",(()=>{a.checked?e.classList.remove("hidden"):e.classList.add("hidden")}))}();const cn=[];let un=JSON.parse(localStorage.getItem("tasks"));if(null!=un){console.log(un);for(let e=0;e<un.length;e++)cn.push(un[e])}const mn=[];let An=JSON.parse(localStorage.getItem("projects"));if(console.log(An),null!=An){console.log(An);for(let e=0;e<An.length;e++)mn.push(An[e])}let pn="main";Ke(cn,"main",mn),en(pn);const hn=document.getElementById("newTaskForm"),fn=document.getElementById("formDiv");hn.addEventListener("submit",(e=>{e.preventDefault();let n={id:ln(),complete:!1,name:e.target.elements.taskName.value,description:e.target.elements.taskDescription.value,priority:e.target.elements.priority.value,project:e.target.elements.project.value,due:e.target.elements.dueDate.value};cn.push(n),localStorage.setItem("tasks",JSON.stringify(cn)),e.target.reset(),fn.classList.add("hidden"),Ke(cn,pn,mn)}));const gn=document.getElementById("leftColumn"),Cn=document.getElementById("menuToggle");document.getElementById("allTasks").addEventListener("click",(()=>{window.innerWidth<700&&gn.classList.add("hidden"),Cn.checked=!1,pn="main",en(pn),Ke(cn,pn,mn)})),document.getElementById("dueToday").addEventListener("click",(()=>{window.innerWidth<700&&gn.classList.add("hidden"),Cn.checked=!1,pn="due today",en(pn),Ke(cn,pn,mn)})),document.getElementById("dueThisWeek").addEventListener("click",(()=>{window.innerWidth<700&&gn.classList.add("hidden"),Cn.checked=!1,pn="due this week",en(pn),Ke(cn,pn,mn)})),document.getElementById("completedTasksFilter").addEventListener("click",(()=>{window.innerWidth<700&&gn.classList.add("hidden"),Cn.checked=!1,pn="complete",en(pn),Ke(cn,pn,mn)})),function(){const e=document.getElementById("newProject"),n=document.getElementById("newProjectsContainer"),t=B({element:"form",domId:"projectForm",className:"hidden"});n.insertAdjacentElement("beforebegin",t);const o=B({element:"input",domType:"text",domId:"projectName",domName:"projectName",domPlaceholder:"Project name..."});t.appendChild(o);const a=B({element:"div",className:"projectFormButtons"});t.appendChild(a);const r=B({element:"input",className:"projectsSaveButton",domType:"submit",domValue:"Save"});a.appendChild(r);const i=B({element:"button",className:"projectsCancelButton",domType:"button",domText:"Cancel",domId:"projectsCancelBtn"});a.appendChild(i),e.addEventListener("click",(()=>{t.classList.remove("hidden")})),i.addEventListener("click",(()=>{t.classList.add("hidden")}))}();const vn=document.getElementById("taskProject");if(mn.length>0)for(let e=0;e<mn.length;e++){const n=B({element:"option",domValue:mn[e],domText:mn[e]});vn.appendChild(n)}const Bn=document.getElementById("projectForm");Bn.addEventListener("submit",(e=>{e.preventDefault();const n=e.target.elements.projectName.value;mn.push(n),En(n),tn(cn,mn,pn,n),localStorage.setItem("projects",JSON.stringify(mn)),e.target.reset(),Bn.classList.add("hidden")}));const bn=B({element:"div",className:"createdProjects",domId:"createdProjects"});Bn.insertAdjacentElement("beforebegin",bn);const En=e=>{const n=B({element:"option",domValue:e,domText:e});vn.appendChild(n)};for(let e=0;e<mn.length;e++)tn(cn,mn,pn,mn[e])})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
