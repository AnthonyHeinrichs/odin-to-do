(()=>{"use strict";var e={172:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,".filterTitle {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.title {\n  margin-left: 48px;\n  font-size: 48px;\n  color: #0E0080;\n  font-weight: 600;\n}\n\n.filterDescription {\n  margin-left: 48px;\n  margin-top: 12px;\n  font-size: 24px;\n  color: #0E0080;\n  font-weight: 300;\n}","",{version:3,sources:["webpack://./src/components/styles/filter-title.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,uBAAuB;AACzB;;AAEA;EACE,iBAAiB;EACjB,eAAe;EACf,cAAc;EACd,gBAAgB;AAClB;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;EAChB,eAAe;EACf,cAAc;EACd,gBAAgB;AAClB",sourcesContent:[".filterTitle {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.title {\n  margin-left: 48px;\n  font-size: 48px;\n  color: #0E0080;\n  font-weight: 600;\n}\n\n.filterDescription {\n  margin-left: 48px;\n  margin-top: 12px;\n  font-size: 24px;\n  color: #0E0080;\n  font-weight: 300;\n}"],sourceRoot:""}]);const s=i},188:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,".taskForm {\n  margin-left: 48px;\n  margin-top: 18px;\n  padding: 8px;\n  width: 65vw;\n  height: 80px;\n}\n\n#taskName {\n  font-size: 18px;\n  margin-left: 6px;\n  border-top: none;\n  border-left: none;\n  border-right: none;\n  border-bottom: solid #5A49E3;\n}\n\n#taskDescription {\n  font-size: 18px;\n  margin-left: 55px;\n  width: 300px;\n  border-top: none;\n  border-left: none;\n  border-right: none;\n  border-bottom: solid #5A49E3;\n}\n\n#priority {\n  font-size: 18px;\n  margin-left: 80px;\n}\n\n#taskProject {\n  font-size: 18px;\n  margin-left: 80px;\n}\n\n#dueDate {\n  font-size: 18px;\n  margin-left: 60px;\n}\n\n.formButtons {\n  display: flex;\n  justify-content: end;\n  margin-top: 18px;\n}\n\n.saveButton {\n  border: none;\n  font-size: 16px;\n  background: #B3F8B1;\n  border-radius: 2px;\n  padding: 6px;\n  width: 80px;\n  margin-right: 24px;\n}\n\n.cancelButton {\n  border: none;\n  font-size: 16px;\n  background: #F9AFAF;\n  border-radius: 2px;\n  padding: 6px;\n  width: 80px;\n}\n\ntextarea:focus, input:focus{\n  outline: none;\n}","",{version:3,sources:["webpack://./src/components/styles/form-styles.css"],names:[],mappings:"AAAA;EACE,iBAAiB;EACjB,gBAAgB;EAChB,YAAY;EACZ,WAAW;EACX,YAAY;AACd;;AAEA;EACE,eAAe;EACf,gBAAgB;EAChB,gBAAgB;EAChB,iBAAiB;EACjB,kBAAkB;EAClB,4BAA4B;AAC9B;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,YAAY;EACZ,gBAAgB;EAChB,iBAAiB;EACjB,kBAAkB;EAClB,4BAA4B;AAC9B;;AAEA;EACE,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,oBAAoB;EACpB,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,mBAAmB;EACnB,kBAAkB;EAClB,YAAY;EACZ,WAAW;EACX,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,mBAAmB;EACnB,kBAAkB;EAClB,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,aAAa;AACf",sourcesContent:[".taskForm {\n  margin-left: 48px;\n  margin-top: 18px;\n  padding: 8px;\n  width: 65vw;\n  height: 80px;\n}\n\n#taskName {\n  font-size: 18px;\n  margin-left: 6px;\n  border-top: none;\n  border-left: none;\n  border-right: none;\n  border-bottom: solid #5A49E3;\n}\n\n#taskDescription {\n  font-size: 18px;\n  margin-left: 55px;\n  width: 300px;\n  border-top: none;\n  border-left: none;\n  border-right: none;\n  border-bottom: solid #5A49E3;\n}\n\n#priority {\n  font-size: 18px;\n  margin-left: 80px;\n}\n\n#taskProject {\n  font-size: 18px;\n  margin-left: 80px;\n}\n\n#dueDate {\n  font-size: 18px;\n  margin-left: 60px;\n}\n\n.formButtons {\n  display: flex;\n  justify-content: end;\n  margin-top: 18px;\n}\n\n.saveButton {\n  border: none;\n  font-size: 16px;\n  background: #B3F8B1;\n  border-radius: 2px;\n  padding: 6px;\n  width: 80px;\n  margin-right: 24px;\n}\n\n.cancelButton {\n  border: none;\n  font-size: 16px;\n  background: #F9AFAF;\n  border-radius: 2px;\n  padding: 6px;\n  width: 80px;\n}\n\ntextarea:focus, input:focus{\n  outline: none;\n}"],sourceRoot:""}]);const s=i},297:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,"#content {\n  display: flex;\n\n}\n\n.leftColumn {\n  height: 100vh;\n  min-height: 100%;\n  width: 20vw;\n  background: #EFEFEF;\n}\n\n.rightColumn {\n  height: 100vh;\n  min-height: 100%;\n  width: 80vw;\n}\n\n.header {\n  height: 200px;\n  width: 80vw;\n  background: #D9D9D9;\n  box-shadow: 7px -2px 5px 7px rgba(0,0,0,0.33);\n} \n\n.logoCenter, .lineCenter {\n  display: flex;\n  justify-content: center;\n}\n\n.icon {\n  width: 200px;\n  height: 200px;\n}\n\n.line {\n  height: 2px;\n  width: 15vw;\n  background: #5A49E3;\n}","",{version:3,sources:["webpack://./src/components/styles/layout-styles.css"],names:[],mappings:"AAAA;EACE,aAAa;;AAEf;;AAEA;EACE,aAAa;EACb,gBAAgB;EAChB,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,gBAAgB;EAChB,WAAW;AACb;;AAEA;EACE,aAAa;EACb,WAAW;EACX,mBAAmB;EACnB,6CAA6C;AAC/C;;AAEA;EACE,aAAa;EACb,uBAAuB;AACzB;;AAEA;EACE,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,WAAW;EACX,WAAW;EACX,mBAAmB;AACrB",sourcesContent:["#content {\n  display: flex;\n\n}\n\n.leftColumn {\n  height: 100vh;\n  min-height: 100%;\n  width: 20vw;\n  background: #EFEFEF;\n}\n\n.rightColumn {\n  height: 100vh;\n  min-height: 100%;\n  width: 80vw;\n}\n\n.header {\n  height: 200px;\n  width: 80vw;\n  background: #D9D9D9;\n  box-shadow: 7px -2px 5px 7px rgba(0,0,0,0.33);\n} \n\n.logoCenter, .lineCenter {\n  display: flex;\n  justify-content: center;\n}\n\n.icon {\n  width: 200px;\n  height: 200px;\n}\n\n.line {\n  height: 2px;\n  width: 15vw;\n  background: #5A49E3;\n}"],sourceRoot:""}]);const s=i},800:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,".newTask {\n  display: flex;\n  justify-content: flex-end;\n  width: 68vw;\n  margin-top: 48px;\n}\n\n.newTaskIcon {\n  height: 18px;\n  width: 18px;\n  cursor: pointer;\n}\n\n.newTaskButton {\n  font-family: 'Roboto', sans-serif;\n  border: none;\n  background: none;\n  font-size: 18px;\n  font-weight: 300;\n  color: #0E0080;\n  cursor: pointer;\n}","",{version:3,sources:["webpack://./src/components/styles/new-task-button.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,yBAAyB;EACzB,WAAW;EACX,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,eAAe;AACjB;;AAEA;EACE,iCAAiC;EACjC,YAAY;EACZ,gBAAgB;EAChB,eAAe;EACf,gBAAgB;EAChB,cAAc;EACd,eAAe;AACjB",sourcesContent:[".newTask {\n  display: flex;\n  justify-content: flex-end;\n  width: 68vw;\n  margin-top: 48px;\n}\n\n.newTaskIcon {\n  height: 18px;\n  width: 18px;\n  cursor: pointer;\n}\n\n.newTaskButton {\n  font-family: 'Roboto', sans-serif;\n  border: none;\n  background: none;\n  font-size: 18px;\n  font-weight: 300;\n  color: #0E0080;\n  cursor: pointer;\n}"],sourceRoot:""}]);const s=i},692:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,".noTaskContainer {\n  background: #EFEFEF;\n  width: 65vw;\n  height: 40px;\n  margin-left: 48px;\n  margin-top: 48px;\n  border-radius: 5px;\n}\n\n.noTaskText {\n  font-family: 'Roboto', sans-serif;\n  font-style: italic;\n  padding: 8px;\n}","",{version:3,sources:["webpack://./src/components/styles/no-tasks.css"],names:[],mappings:"AAAA;EACE,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,iCAAiC;EACjC,kBAAkB;EAClB,YAAY;AACd",sourcesContent:[".noTaskContainer {\n  background: #EFEFEF;\n  width: 65vw;\n  height: 40px;\n  margin-left: 48px;\n  margin-top: 48px;\n  border-radius: 5px;\n}\n\n.noTaskText {\n  font-family: 'Roboto', sans-serif;\n  font-style: italic;\n  padding: 8px;\n}"],sourceRoot:""}]);const s=i},115:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,".projectsTitle {\n  color: #0E0080;\n  font-weight: 500;\n  margin-left: 48px;\n  margin-top: 48px;\n  font-size: 32px;\n}\n\n.newProjectsContainer {\n  display: flex;\n  gap: 10px;\n  margin-bottom: 48px;\n}\n\n.newProjectIcon {\n  height: 18px;\n  width: 18px;\n  margin-left: 48px;\n  margin-top: 12px;\n  align-self: center;\n}\n\n.newProjectButton {\n  border: none;\n  font-family: 'Roboto', sans-serif;\n  font-weight: 300;\n  font-size: 18px;\n  margin-top: 12px;\n  color: #0E0080;\n}","",{version:3,sources:["webpack://./src/components/styles/project-list.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,gBAAgB;EAChB,iBAAiB;EACjB,gBAAgB;EAChB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,iBAAiB;EACjB,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,iCAAiC;EACjC,gBAAgB;EAChB,eAAe;EACf,gBAAgB;EAChB,cAAc;AAChB",sourcesContent:[".projectsTitle {\n  color: #0E0080;\n  font-weight: 500;\n  margin-left: 48px;\n  margin-top: 48px;\n  font-size: 32px;\n}\n\n.newProjectsContainer {\n  display: flex;\n  gap: 10px;\n  margin-bottom: 48px;\n}\n\n.newProjectIcon {\n  height: 18px;\n  width: 18px;\n  margin-left: 48px;\n  margin-top: 12px;\n  align-self: center;\n}\n\n.newProjectButton {\n  border: none;\n  font-family: 'Roboto', sans-serif;\n  font-weight: 300;\n  font-size: 18px;\n  margin-top: 12px;\n  color: #0E0080;\n}"],sourceRoot:""}]);const s=i},184:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,"#projectName {\n  margin: 24px 0px 24px 48px;\n  border-top: none;\n  border-left: none;\n  border-right: none;\n  border-bottom: solid #5A49E3;\n  background: #EFEFEF;\n  font-size: 18px;\n  width: 200px;\n}\n\n.projectFormButtons {\n  margin-left: 48px;\n  margin-bottom: 24px;\n}\n\n.projectsSaveButton {\n  border: none;\n  font-size: 16px;\n  background: #B3F8B1;\n  border-radius: 2px;\n  padding: 6px;\n  width: 80px;\n  margin-right: 24px;\n}\n\n.projectsCancelButton {\n  border: none;\n  font-size: 16px;\n  background: #F9AFAF;\n  border-radius: 2px;\n  padding: 6px;\n  width: 80px;\n}\n\n.createdProjects {\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  margin-left: 48px;\n  margin-bottom: 24px;\n}\n\n.singleProject {\n  display: flex;\n  gap: 10px;\n}\n\n.checklistIcon {\n  height: 24px;\n  width: 24px;\n  margin-top: 24px;\n}\n\n.project {\n  border: none;\n  color: #0E0080;\n  font-weight: 500;\n  font-size: 24px;\n  margin-top: 24px;\n}\n\ntextarea:focus, input:focus{\n  outline: none;\n}","",{version:3,sources:["webpack://./src/components/styles/projects.css"],names:[],mappings:"AAAA;EACE,0BAA0B;EAC1B,gBAAgB;EAChB,iBAAiB;EACjB,kBAAkB;EAClB,4BAA4B;EAC5B,mBAAmB;EACnB,eAAe;EACf,YAAY;AACd;;AAEA;EACE,iBAAiB;EACjB,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,mBAAmB;EACnB,kBAAkB;EAClB,YAAY;EACZ,WAAW;EACX,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,mBAAmB;EACnB,kBAAkB;EAClB,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,kBAAkB;EAClB,iBAAiB;EACjB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,SAAS;AACX;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,cAAc;EACd,gBAAgB;EAChB,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,aAAa;AACf",sourcesContent:["#projectName {\n  margin: 24px 0px 24px 48px;\n  border-top: none;\n  border-left: none;\n  border-right: none;\n  border-bottom: solid #5A49E3;\n  background: #EFEFEF;\n  font-size: 18px;\n  width: 200px;\n}\n\n.projectFormButtons {\n  margin-left: 48px;\n  margin-bottom: 24px;\n}\n\n.projectsSaveButton {\n  border: none;\n  font-size: 16px;\n  background: #B3F8B1;\n  border-radius: 2px;\n  padding: 6px;\n  width: 80px;\n  margin-right: 24px;\n}\n\n.projectsCancelButton {\n  border: none;\n  font-size: 16px;\n  background: #F9AFAF;\n  border-radius: 2px;\n  padding: 6px;\n  width: 80px;\n}\n\n.createdProjects {\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  margin-left: 48px;\n  margin-bottom: 24px;\n}\n\n.singleProject {\n  display: flex;\n  gap: 10px;\n}\n\n.checklistIcon {\n  height: 24px;\n  width: 24px;\n  margin-top: 24px;\n}\n\n.project {\n  border: none;\n  color: #0E0080;\n  font-weight: 500;\n  font-size: 24px;\n  margin-top: 24px;\n}\n\ntextarea:focus, input:focus{\n  outline: none;\n}"],sourceRoot:""}]);const s=i},307:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,".allFilters {\n  margin-top: 48px;\n  display: flex;\n  flex-direction: column;\n  margin-left: 48px;\n}\n\n.filterTitle {\n  color: #0E0080;\n  font-weight: 500;\n  font-size: 32px;\n  margin-bottom: 24px;\n}\n\n.filter {\n  display: flex;\n  gap: 10px;\n  margin-top: 18px;\n}\n\n.filterButton {\n  border: none;\n  color: #0E0080;\n  font-family: 'Roboto', sans-serif;\n  font-weight: 300;\n  font-size: 24px;\n}\n\n.filterIcon {\n  height: 24px;\n  width: 24px;\n}","",{version:3,sources:["webpack://./src/components/styles/task-filters.css"],names:[],mappings:"AAAA;EACE,gBAAgB;EAChB,aAAa;EACb,sBAAsB;EACtB,iBAAiB;AACnB;;AAEA;EACE,cAAc;EACd,gBAAgB;EAChB,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,SAAS;EACT,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,cAAc;EACd,iCAAiC;EACjC,gBAAgB;EAChB,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,WAAW;AACb",sourcesContent:[".allFilters {\n  margin-top: 48px;\n  display: flex;\n  flex-direction: column;\n  margin-left: 48px;\n}\n\n.filterTitle {\n  color: #0E0080;\n  font-weight: 500;\n  font-size: 32px;\n  margin-bottom: 24px;\n}\n\n.filter {\n  display: flex;\n  gap: 10px;\n  margin-top: 18px;\n}\n\n.filterButton {\n  border: none;\n  color: #0E0080;\n  font-family: 'Roboto', sans-serif;\n  font-weight: 300;\n  font-size: 24px;\n}\n\n.filterIcon {\n  height: 24px;\n  width: 24px;\n}"],sourceRoot:""}]);const s=i},568:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,".taskLabels {\n  display: flex;\n  justify-content: start;\n  margin-left: 60px;\n  margin-top: 48px;\n}\n\n.nameLabel, \n.descriptionLabel, \n.priorityLabel, \n.dueDateLabel,\n.projectLabel {\n  font-weight: 700;\n  font-size: 18px;\n  color: #0E0080;\n}\n\n.descriptionLabel {\n  margin-left: 250px;\n}\n\n.priorityLabel {\n  margin-left: 300px;\n}\n\n.projectLabel {\n  margin-left: 80px;\n}\n\n.dueDateLabel {\n  margin-left: 200px;\n}","",{version:3,sources:["webpack://./src/components/styles/task-labels.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;;;;;EAKE,gBAAgB;EAChB,eAAe;EACf,cAAc;AAChB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;AACpB",sourcesContent:[".taskLabels {\n  display: flex;\n  justify-content: start;\n  margin-left: 60px;\n  margin-top: 48px;\n}\n\n.nameLabel, \n.descriptionLabel, \n.priorityLabel, \n.dueDateLabel,\n.projectLabel {\n  font-weight: 700;\n  font-size: 18px;\n  color: #0E0080;\n}\n\n.descriptionLabel {\n  margin-left: 250px;\n}\n\n.priorityLabel {\n  margin-left: 300px;\n}\n\n.projectLabel {\n  margin-left: 80px;\n}\n\n.dueDateLabel {\n  margin-left: 200px;\n}"],sourceRoot:""}]);const s=i},710:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,".task {\n  display: flex;\n  align-items: center;\n  margin-left: 48px;\n  background: #EFEFEF;\n  width: 65vw;\n  height: 40px;\n  margin-left: 48px;\n  margin-top: 24px;\n  border-radius: 5px;\n}\n\n.name {\n  width: 200px;\n  margin-left: 12px;\n}\n\n.description {\n  width: 300px;\n  margin-left: 95px;\n}\n\n.priority {\n  width: 100px;\n  margin-left: 80px;\n}\n\n.projectRef {\n  width: 80px;\n  margin-left: 80px;\n}\n\n.due {\n  margin-left: 165px;\n}","",{version:3,sources:["webpack://./src/components/styles/tasks.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,mBAAmB;EACnB,iBAAiB;EACjB,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;AACpB",sourcesContent:[".task {\n  display: flex;\n  align-items: center;\n  margin-left: 48px;\n  background: #EFEFEF;\n  width: 65vw;\n  height: 40px;\n  margin-left: 48px;\n  margin-top: 24px;\n  border-radius: 5px;\n}\n\n.name {\n  width: 200px;\n  margin-left: 12px;\n}\n\n.description {\n  width: 300px;\n  margin-left: 95px;\n}\n\n.priority {\n  width: 100px;\n  margin-left: 80px;\n}\n\n.projectRef {\n  width: 80px;\n  margin-left: 80px;\n}\n\n.due {\n  margin-left: 165px;\n}"],sourceRoot:""}]);const s=i},257:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Gemunu+Libre:wght@400;500;700;800&family=Roboto:wght@400;500;700;900&display=swap);"]),i.push([e.id,"body, p, h2, h3 {\n  margin: 0;\n  font-family: 'Roboto', Verdana, Geneva, Tahoma, sans-serif;\n}\n\n.hidden {\n  display: none !important;\n}\n\n","",{version:3,sources:["webpack://./src/global-style.css"],names:[],mappings:"AAEA;EACE,SAAS;EACT,0DAA0D;AAC5D;;AAEA;EACE,wBAAwB;AAC1B",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Gemunu+Libre:wght@400;500;700;800&family=Roboto:wght@400;500;700;900&display=swap');\n\nbody, p, h2, h3 {\n  margin: 0;\n  font-family: 'Roboto', Verdana, Geneva, Tahoma, sans-serif;\n}\n\n.hidden {\n  display: none !important;\n}\n\n"],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);o&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),n.push(c))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var a={},i=[],s=0;s<e.length;s++){var l=e[s],d=o.base?l[0]+o.base:l[0],c=a[d]||0,u="".concat(d," ").concat(c);a[d]=c+1;var m=t(u),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==m)n[m].references++,n[m].updater(A);else{var p=r(A,o);o.byIndex=s,n.splice(s,0,{identifier:u,updater:p,references:1})}i.push(u)}return i}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=t(a[i]);n[s].references--}for(var l=o(e,r),d=0;d<a.length;d++){var c=t(a[d]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}a=l}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return e[o](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");o.length&&(e=o[o.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),o=t(795),r=t.n(o),a=t(569),i=t.n(a),s=t(565),l=t.n(s),d=t(216),c=t.n(d),u=t(589),m=t.n(u),A=t(257),p={};p.styleTagTransform=m(),p.setAttributes=l(),p.insert=i().bind(null,"head"),p.domAPI=r(),p.insertStyleElement=c(),n()(A.Z,p),A.Z&&A.Z.locals&&A.Z.locals;var f=t(184),h={};h.styleTagTransform=m(),h.setAttributes=l(),h.insert=i().bind(null,"head"),h.domAPI=r(),h.insertStyleElement=c(),n()(f.Z,h),f.Z&&f.Z.locals&&f.Z.locals;var g=t(710),C={};function E({element:e,className:n,domId:t,domText:o,domSrc:r,domAlt:a,domHref:i,domType:s,domName:l,domValue:d,domPlaceholder:c}){const u=document.createElement(e);return void 0!==n&&u.classList.add(n),void 0!==t&&(u.id=t),void 0!==o&&(u.innerText=o),void 0!==r&&(u.src=r),void 0!==a&&(u.alt=a),void 0!==i&&(u.href=i),void 0!==s&&(u.type=s),void 0!==l&&(u.name=l),void 0!==d&&(u.value=d),"unedefined"!=typeof c&&(u.placeholder=c),u}C.styleTagTransform=m(),C.setAttributes=l(),C.insert=i().bind(null,"head"),C.domAPI=r(),C.insertStyleElement=c(),n()(g.Z,C),g.Z&&g.Z.locals&&g.Z.locals;const b=t.p+"5747a3ad394644d3759a.png";var v=t(307),w={};w.styleTagTransform=m(),w.setAttributes=l(),w.insert=i().bind(null,"head"),w.domAPI=r(),w.insertStyleElement=c(),n()(v.Z,w),v.Z&&v.Z.locals&&v.Z.locals;const B=t.p+"b41f862dbe35dfd954db.png",x=t.p+"72bcc03ea6db208037b8.png",y=t.p+"ce7b488d9ed9b13632e2.png",k=t.p+"9ec0e4aa5247a5494c9b.png",T=t.p+"71721b18f499ba09b1eb.png";var j=t(115),D={};D.styleTagTransform=m(),D.setAttributes=l(),D.insert=i().bind(null,"head"),D.domAPI=r(),D.insertStyleElement=c(),n()(j.Z,D),j.Z&&j.Z.locals&&j.Z.locals;var N=t(692),S={};S.styleTagTransform=m(),S.setAttributes=l(),S.insert=i().bind(null,"head"),S.domAPI=r(),S.insertStyleElement=c(),n()(N.Z,S),N.Z&&N.Z.locals&&N.Z.locals;var P=t(800),M={};M.styleTagTransform=m(),M.setAttributes=l(),M.insert=i().bind(null,"head"),M.domAPI=r(),M.insertStyleElement=c(),n()(P.Z,M),P.Z&&P.Z.locals&&P.Z.locals;var Y=t(188),I={};I.styleTagTransform=m(),I.setAttributes=l(),I.insert=i().bind(null,"head"),I.domAPI=r(),I.insertStyleElement=c(),n()(Y.Z,I),Y.Z&&Y.Z.locals&&Y.Z.locals;var L=t(568),W={};W.styleTagTransform=m(),W.setAttributes=l(),W.insert=i().bind(null,"head"),W.domAPI=r(),W.insertStyleElement=c(),n()(L.Z,W),L.Z&&L.Z.locals&&L.Z.locals;var F=t(172),Z={};Z.styleTagTransform=m(),Z.setAttributes=l(),Z.insert=i().bind(null,"head"),Z.domAPI=r(),Z.insertStyleElement=c(),n()(F.Z,Z),F.Z&&F.Z.locals&&F.Z.locals;var U=t(297),z={};function R(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function H(e){return H="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},H(e)}function O(e){return R(1,arguments),e instanceof Date||"object"===H(e)&&"[object Date]"===Object.prototype.toString.call(e)}function q(e){return q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},q(e)}function X(e){R(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"===q(e)&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function G(e){if(R(1,arguments),!O(e)&&"number"!=typeof e)return!1;var n=X(e);return!isNaN(Number(n))}function Q(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}function V(e,n){R(2,arguments);var t=X(e).getTime(),o=Q(n);return new Date(t+o)}function J(e,n){R(2,arguments);var t=Q(n);return V(e,-t)}z.styleTagTransform=m(),z.setAttributes=l(),z.insert=i().bind(null,"head"),z.domAPI=r(),z.insertStyleElement=c(),n()(U.Z,z),U.Z&&U.Z.locals&&U.Z.locals;var _=864e5;function $(e){R(1,arguments);var n=1,t=X(e),o=t.getUTCDay(),r=(o<n?7:0)+o-n;return t.setUTCDate(t.getUTCDate()-r),t.setUTCHours(0,0,0,0),t}function K(e){R(1,arguments);var n=X(e),t=n.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(t+1,0,4),o.setUTCHours(0,0,0,0);var r=$(o),a=new Date(0);a.setUTCFullYear(t,0,4),a.setUTCHours(0,0,0,0);var i=$(a);return n.getTime()>=r.getTime()?t+1:n.getTime()>=i.getTime()?t:t-1}function ee(e){R(1,arguments);var n=K(e),t=new Date(0);t.setUTCFullYear(n,0,4),t.setUTCHours(0,0,0,0);var o=$(t);return o}var ne=6048e5,te={};function oe(){return te}function re(e,n){var t,o,r,a,i,s,l,d;R(1,arguments);var c=oe(),u=Q(null!==(t=null!==(o=null!==(r=null!==(a=null==n?void 0:n.weekStartsOn)&&void 0!==a?a:null==n||null===(i=n.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==r?r:c.weekStartsOn)&&void 0!==o?o:null===(l=c.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==t?t:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=X(e),A=m.getUTCDay(),p=(A<u?7:0)+A-u;return m.setUTCDate(m.getUTCDate()-p),m.setUTCHours(0,0,0,0),m}function ae(e,n){var t,o,r,a,i,s,l,d;R(1,arguments);var c=X(e),u=c.getUTCFullYear(),m=oe(),A=Q(null!==(t=null!==(o=null!==(r=null!==(a=null==n?void 0:n.firstWeekContainsDate)&&void 0!==a?a:null==n||null===(i=n.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==r?r:m.firstWeekContainsDate)&&void 0!==o?o:null===(l=m.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==t?t:1);if(!(A>=1&&A<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var p=new Date(0);p.setUTCFullYear(u+1,0,A),p.setUTCHours(0,0,0,0);var f=re(p,n),h=new Date(0);h.setUTCFullYear(u,0,A),h.setUTCHours(0,0,0,0);var g=re(h,n);return c.getTime()>=f.getTime()?u+1:c.getTime()>=g.getTime()?u:u-1}function ie(e,n){var t,o,r,a,i,s,l,d;R(1,arguments);var c=oe(),u=Q(null!==(t=null!==(o=null!==(r=null!==(a=null==n?void 0:n.firstWeekContainsDate)&&void 0!==a?a:null==n||null===(i=n.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==r?r:c.firstWeekContainsDate)&&void 0!==o?o:null===(l=c.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==t?t:1),m=ae(e,n),A=new Date(0);A.setUTCFullYear(m,0,u),A.setUTCHours(0,0,0,0);var p=re(A,n);return p}var se=6048e5;function le(e,n){for(var t=e<0?"-":"",o=Math.abs(e).toString();o.length<n;)o="0"+o;return t+o}const de=function(e,n){var t=e.getUTCFullYear(),o=t>0?t:1-t;return le("yy"===n?o%100:o,n.length)},ce=function(e,n){var t=e.getUTCMonth();return"M"===n?String(t+1):le(t+1,2)},ue=function(e,n){return le(e.getUTCDate(),n.length)},me=function(e,n){return le(e.getUTCHours()%12||12,n.length)},Ae=function(e,n){return le(e.getUTCHours(),n.length)},pe=function(e,n){return le(e.getUTCMinutes(),n.length)},fe=function(e,n){return le(e.getUTCSeconds(),n.length)},he=function(e,n){var t=n.length,o=e.getUTCMilliseconds();return le(Math.floor(o*Math.pow(10,t-3)),n.length)};var ge={G:function(e,n,t){var o=e.getUTCFullYear()>0?1:0;switch(n){case"G":case"GG":case"GGG":return t.era(o,{width:"abbreviated"});case"GGGGG":return t.era(o,{width:"narrow"});default:return t.era(o,{width:"wide"})}},y:function(e,n,t){if("yo"===n){var o=e.getUTCFullYear(),r=o>0?o:1-o;return t.ordinalNumber(r,{unit:"year"})}return de(e,n)},Y:function(e,n,t,o){var r=ae(e,o),a=r>0?r:1-r;return"YY"===n?le(a%100,2):"Yo"===n?t.ordinalNumber(a,{unit:"year"}):le(a,n.length)},R:function(e,n){return le(K(e),n.length)},u:function(e,n){return le(e.getUTCFullYear(),n.length)},Q:function(e,n,t){var o=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"Q":return String(o);case"QQ":return le(o,2);case"Qo":return t.ordinalNumber(o,{unit:"quarter"});case"QQQ":return t.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(o,{width:"narrow",context:"formatting"});default:return t.quarter(o,{width:"wide",context:"formatting"})}},q:function(e,n,t){var o=Math.ceil((e.getUTCMonth()+1)/3);switch(n){case"q":return String(o);case"qq":return le(o,2);case"qo":return t.ordinalNumber(o,{unit:"quarter"});case"qqq":return t.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(o,{width:"narrow",context:"standalone"});default:return t.quarter(o,{width:"wide",context:"standalone"})}},M:function(e,n,t){var o=e.getUTCMonth();switch(n){case"M":case"MM":return ce(e,n);case"Mo":return t.ordinalNumber(o+1,{unit:"month"});case"MMM":return t.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(o,{width:"narrow",context:"formatting"});default:return t.month(o,{width:"wide",context:"formatting"})}},L:function(e,n,t){var o=e.getUTCMonth();switch(n){case"L":return String(o+1);case"LL":return le(o+1,2);case"Lo":return t.ordinalNumber(o+1,{unit:"month"});case"LLL":return t.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(o,{width:"narrow",context:"standalone"});default:return t.month(o,{width:"wide",context:"standalone"})}},w:function(e,n,t,o){var r=function(e,n){R(1,arguments);var t=X(e),o=re(t,n).getTime()-ie(t,n).getTime();return Math.round(o/se)+1}(e,o);return"wo"===n?t.ordinalNumber(r,{unit:"week"}):le(r,n.length)},I:function(e,n,t){var o=function(e){R(1,arguments);var n=X(e),t=$(n).getTime()-ee(n).getTime();return Math.round(t/ne)+1}(e);return"Io"===n?t.ordinalNumber(o,{unit:"week"}):le(o,n.length)},d:function(e,n,t){return"do"===n?t.ordinalNumber(e.getUTCDate(),{unit:"date"}):ue(e,n)},D:function(e,n,t){var o=function(e){R(1,arguments);var n=X(e),t=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var o=n.getTime(),r=t-o;return Math.floor(r/_)+1}(e);return"Do"===n?t.ordinalNumber(o,{unit:"dayOfYear"}):le(o,n.length)},E:function(e,n,t){var o=e.getUTCDay();switch(n){case"E":case"EE":case"EEE":return t.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},e:function(e,n,t,o){var r=e.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(n){case"e":return String(a);case"ee":return le(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},c:function(e,n,t,o){var r=e.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(n){case"c":return String(a);case"cc":return le(a,n.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(r,{width:"narrow",context:"standalone"});case"cccccc":return t.day(r,{width:"short",context:"standalone"});default:return t.day(r,{width:"wide",context:"standalone"})}},i:function(e,n,t){var o=e.getUTCDay(),r=0===o?7:o;switch(n){case"i":return String(r);case"ii":return le(r,n.length);case"io":return t.ordinalNumber(r,{unit:"day"});case"iii":return t.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},a:function(e,n,t){var o=e.getUTCHours()/12>=1?"pm":"am";switch(n){case"a":case"aa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(e,n,t){var o,r=e.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",n){case"b":case"bb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(e,n,t){var o,r=e.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",n){case"B":case"BB":case"BBB":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(e,n,t){if("ho"===n){var o=e.getUTCHours()%12;return 0===o&&(o=12),t.ordinalNumber(o,{unit:"hour"})}return me(e,n)},H:function(e,n,t){return"Ho"===n?t.ordinalNumber(e.getUTCHours(),{unit:"hour"}):Ae(e,n)},K:function(e,n,t){var o=e.getUTCHours()%12;return"Ko"===n?t.ordinalNumber(o,{unit:"hour"}):le(o,n.length)},k:function(e,n,t){var o=e.getUTCHours();return 0===o&&(o=24),"ko"===n?t.ordinalNumber(o,{unit:"hour"}):le(o,n.length)},m:function(e,n,t){return"mo"===n?t.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):pe(e,n)},s:function(e,n,t){return"so"===n?t.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):fe(e,n)},S:function(e,n){return he(e,n)},X:function(e,n,t,o){var r=(o._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(n){case"X":return Ee(r);case"XXXX":case"XX":return be(r);default:return be(r,":")}},x:function(e,n,t,o){var r=(o._originalDate||e).getTimezoneOffset();switch(n){case"x":return Ee(r);case"xxxx":case"xx":return be(r);default:return be(r,":")}},O:function(e,n,t,o){var r=(o._originalDate||e).getTimezoneOffset();switch(n){case"O":case"OO":case"OOO":return"GMT"+Ce(r,":");default:return"GMT"+be(r,":")}},z:function(e,n,t,o){var r=(o._originalDate||e).getTimezoneOffset();switch(n){case"z":case"zz":case"zzz":return"GMT"+Ce(r,":");default:return"GMT"+be(r,":")}},t:function(e,n,t,o){var r=o._originalDate||e;return le(Math.floor(r.getTime()/1e3),n.length)},T:function(e,n,t,o){return le((o._originalDate||e).getTime(),n.length)}};function Ce(e,n){var t=e>0?"-":"+",o=Math.abs(e),r=Math.floor(o/60),a=o%60;if(0===a)return t+String(r);var i=n||"";return t+String(r)+i+le(a,2)}function Ee(e,n){return e%60==0?(e>0?"-":"+")+le(Math.abs(e)/60,2):be(e,n)}function be(e,n){var t=n||"",o=e>0?"-":"+",r=Math.abs(e);return o+le(Math.floor(r/60),2)+t+le(r%60,2)}const ve=ge;var we=function(e,n){switch(e){case"P":return n.date({width:"short"});case"PP":return n.date({width:"medium"});case"PPP":return n.date({width:"long"});default:return n.date({width:"full"})}},Be=function(e,n){switch(e){case"p":return n.time({width:"short"});case"pp":return n.time({width:"medium"});case"ppp":return n.time({width:"long"});default:return n.time({width:"full"})}};const xe={p:Be,P:function(e,n){var t,o=e.match(/(P+)(p+)?/)||[],r=o[1],a=o[2];if(!a)return we(e,n);switch(r){case"P":t=n.dateTime({width:"short"});break;case"PP":t=n.dateTime({width:"medium"});break;case"PPP":t=n.dateTime({width:"long"});break;default:t=n.dateTime({width:"full"})}return t.replace("{{date}}",we(r,n)).replace("{{time}}",Be(a,n))}};function ye(e){var n=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return n.setUTCFullYear(e.getFullYear()),e.getTime()-n.getTime()}var ke=["D","DD"],Te=["YY","YYYY"];function je(e){return-1!==ke.indexOf(e)}function De(e){return-1!==Te.indexOf(e)}function Ne(e,n,t){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(n,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(n,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var Se={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function Pe(e){return function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=n.width?String(n.width):e.defaultWidth,o=e.formats[t]||e.formats[e.defaultWidth];return o}}const Me={date:Pe({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:Pe({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:Pe({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var Ye={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Ie(e){return function(n,t){var o;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,a=null!=t&&t.width?String(t.width):r;o=e.formattingValues[a]||e.formattingValues[r]}else{var i=e.defaultWidth,s=null!=t&&t.width?String(t.width):e.defaultWidth;o=e.values[s]||e.values[i]}return o[e.argumentCallback?e.argumentCallback(n):n]}}const Le={ordinalNumber:function(e,n){var t=Number(e),o=t%100;if(o>20||o<10)switch(o%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:Ie({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Ie({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:Ie({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Ie({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Ie({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function We(e){return function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=t.width,r=o&&e.matchPatterns[o]||e.matchPatterns[e.defaultMatchWidth],a=n.match(r);if(!a)return null;var i,s=a[0],l=o&&e.parsePatterns[o]||e.parsePatterns[e.defaultParseWidth],d=Array.isArray(l)?Ze(l,(function(e){return e.test(s)})):Fe(l,(function(e){return e.test(s)}));i=e.valueCallback?e.valueCallback(d):d,i=t.valueCallback?t.valueCallback(i):i;var c=n.slice(s.length);return{value:i,rest:c}}}function Fe(e,n){for(var t in e)if(e.hasOwnProperty(t)&&n(e[t]))return t}function Ze(e,n){for(var t=0;t<e.length;t++)if(n(e[t]))return t}var Ue,ze={ordinalNumber:(Ue={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.match(Ue.matchPattern);if(!t)return null;var o=t[0],r=e.match(Ue.parsePattern);if(!r)return null;var a=Ue.valueCallback?Ue.valueCallback(r[0]):r[0];a=n.valueCallback?n.valueCallback(a):a;var i=e.slice(o.length);return{value:a,rest:i}}),era:We({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:We({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:We({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:We({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:We({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const Re={code:"en-US",formatDistance:function(e,n,t){var o,r=Se[e];return o="string"==typeof r?r:1===n?r.one:r.other.replace("{{count}}",n.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+o:o+" ago":o},formatLong:Me,formatRelative:function(e,n,t,o){return Ye[e]},localize:Le,match:ze,options:{weekStartsOn:0,firstWeekContainsDate:1}};var He=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Oe=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,qe=/^'([^]*?)'?$/,Xe=/''/g,Ge=/[a-zA-Z]/;function Qe(e){var n=e.match(qe);return n?n[1].replace(Xe,"'"):e}function Ve(e,n){var t,o,r,a,i,s,l,d;R(1,arguments);var c=oe(),u=Q(null!==(t=null!==(o=null!==(r=null!==(a=null==n?void 0:n.weekStartsOn)&&void 0!==a?a:null==n||null===(i=n.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==r?r:c.weekStartsOn)&&void 0!==o?o:null===(l=c.locale)||void 0===l||null===(d=l.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==t?t:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=X(e),A=m.getDay(),p=(A<u?7:0)+A-u;return m.setDate(m.getDate()-p),m.setHours(0,0,0,0),m}function Je(e,n,t){R(2,arguments);var o=Ve(e,t),r=Ve(n,t);return o.getTime()===r.getTime()}function _e(e){const n=document.getElementById("formDiv"),t=document.getElementById("noTask");t.classList.contains("hidden")||t.classList.add("hidden"),document.querySelectorAll(".task").forEach((e=>e.remove()));for(let t=0;t<e.length;t++){const o=E({element:"div",className:"task"});n.insertAdjacentElement("beforebegin",o);const r=E({element:"input",domType:"checkbox",domName:"complete"});e[t].complete?r.setAttribute("checked","checked"):r.removeAttribute("checked"),o.appendChild(r);const a=E({element:"p",className:"name",domText:e[t].name});o.appendChild(a);const i=E({element:"p",className:"description",domText:e[t].description});o.appendChild(i);const s=E({element:"p",className:"priority",domText:e[t].priority});o.appendChild(s);const l=E({element:"p",className:"projectRef",domText:e[t].project});o.appendChild(l);const d=E({element:"time",className:"due",domText:e[t].due});o.appendChild(d),r.addEventListener("change",(()=>{r.checked?(e[t].complete=!0,r.setAttribute("checked","checked")):(e[t].complete=!1,r.setAttribute("checked","unchecked"))}))}}function $e(e,n){const t=function(e,n,t){var o,r,a,i,s,l,d,c,u,m,A,p,f,h,g,C,E,b;R(2,arguments);var v=String(n),w=oe(),B=null!==(o=null!==(r=null==t?void 0:t.locale)&&void 0!==r?r:w.locale)&&void 0!==o?o:Re,x=Q(null!==(a=null!==(i=null!==(s=null!==(l=null==t?void 0:t.firstWeekContainsDate)&&void 0!==l?l:null==t||null===(d=t.locale)||void 0===d||null===(c=d.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==s?s:w.firstWeekContainsDate)&&void 0!==i?i:null===(u=w.locale)||void 0===u||null===(m=u.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==a?a:1);if(!(x>=1&&x<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var y=Q(null!==(A=null!==(p=null!==(f=null!==(h=null==t?void 0:t.weekStartsOn)&&void 0!==h?h:null==t||null===(g=t.locale)||void 0===g||null===(C=g.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==f?f:w.weekStartsOn)&&void 0!==p?p:null===(E=w.locale)||void 0===E||null===(b=E.options)||void 0===b?void 0:b.weekStartsOn)&&void 0!==A?A:0);if(!(y>=0&&y<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!B.localize)throw new RangeError("locale must contain localize property");if(!B.formatLong)throw new RangeError("locale must contain formatLong property");var k=X(e);if(!G(k))throw new RangeError("Invalid time value");var T=ye(k),j=J(k,T),D={firstWeekContainsDate:x,weekStartsOn:y,locale:B,_originalDate:k};return v.match(Oe).map((function(e){var n=e[0];return"p"===n||"P"===n?(0,xe[n])(e,B.formatLong):e})).join("").match(He).map((function(o){if("''"===o)return"'";var r=o[0];if("'"===r)return Qe(o);var a=ve[r];if(a)return null!=t&&t.useAdditionalWeekYearTokens||!De(o)||Ne(o,n,String(e)),null!=t&&t.useAdditionalDayOfYearTokens||!je(o)||Ne(o,n,String(e)),a(j,o,B.localize,D);if(r.match(Ge))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return o})).join("")}(Date.now(),"yyyy-MM-dd"),o=document.getElementById("taskProject");if("main"===n)_e(e.filter((e=>0==e.complete))),o.value="No project";else if("due today"===n)_e(e.filter((e=>e.due==t&&0==e.complete))),o.value="No project";else if("due this week"===n){let n=e.filter((e=>function(e,n){return R(1,arguments),Je(e,Date.now(),n)}(Date.parse(e.due)&&0==e.complete)));_e(n),o.value="No project"}else"complete"===n?_e(e.filter((e=>1==e.complete))):(_e(e.filter((e=>e.project===n&&0==e.complete))),o.value=n)}function Ke(e){const n=document.getElementById("filterTitle"),t=document.getElementById("filterDescription");"main"===e?(n.innerHTML="All tasks",t.innerHTML="Here are all your tasks"):"due today"===e?(n.innerHTML="Due today",t.innerHTML="Here are your tasks due today"):"due this week"===e?(n.innerHTML="Due this week",t.innerHTML="Here are your tasks due this week"):"complete"===e?(n.innerHTML="Completed tasks",t.innerHTML="Here are your completed tasks"):(n.innerHTML=e,t.innerHTML=`Here are your tasks for the ${e} project`)}const en=t.p+"0d20e3d17f145a0ac6f5.png",nn={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let tn;const on=new Uint8Array(16);function rn(){if(!tn&&(tn="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!tn))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return tn(on)}const an=[];for(let e=0;e<256;++e)an.push((e+256).toString(16).slice(1));const sn=function(e,n,t){if(nn.randomUUID&&!n&&!e)return nn.randomUUID();const o=(e=e||{}).random||(e.rng||rn)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,n){t=t||0;for(let e=0;e<16;++e)n[t+e]=o[e];return n}return function(e,n=0){return(an[e[n+0]]+an[e[n+1]]+an[e[n+2]]+an[e[n+3]]+"-"+an[e[n+4]]+an[e[n+5]]+"-"+an[e[n+6]]+an[e[n+7]]+"-"+an[e[n+8]]+an[e[n+9]]+"-"+an[e[n+10]]+an[e[n+11]]+an[e[n+12]]+an[e[n+13]]+an[e[n+14]]+an[e[n+15]]).toLowerCase()}(o)};!function(){const e=document.getElementById("content"),n=E({element:"div",className:"leftColumn",domId:"leftColumn"});e.appendChild(n);const t=E({element:"div",className:"rightColumn",domId:"rightColumn"});e.appendChild(t);const o=E({element:"div",className:"header"});t.appendChild(o);const r=E({element:"div",className:"logoCenter"});n.appendChild(r),r.appendChild(E({element:"img",domSrc:b,domAlt:"To do",className:"icon"}));const a=E({element:"div",className:"lineCenter"});n.appendChild(a);const i=E({element:"div",className:"line"});a.appendChild(i),n.appendChild(function(){const e=E({element:"div",className:"allFilters"}),n=E({element:"h2",className:"filterTitle",domText:"Filters"});e.appendChild(n);const t=E({element:"div",className:"filter"});e.appendChild(t);const o=E({element:"img",className:"filterIcon",domSrc:B,domAlt:"folder"});t.appendChild(o);const r=E({element:"button",className:"filterButton",domId:"allTasks",domText:"All tasks"});t.appendChild(r);const a=E({element:"div",className:"filter"});e.appendChild(a);const i=E({element:"img",className:"filterIcon",domSrc:x,domAlt:"Day calendar"});a.appendChild(i);const s=E({element:"button",className:"filterButton",domId:"dueToday",domText:"Due today"});a.appendChild(s);const l=E({element:"div",className:"filter"});e.appendChild(l);const d=E({element:"img",className:"filterIcon",domSrc:y,domAlt:"Week calendar"});l.appendChild(d);const c=E({element:"button",className:"filterButton",domId:"dueThisWeek",domText:"Due this week"});l.appendChild(c);const u=E({element:"div",className:"filter"});e.appendChild(u);const m=E({element:"img",className:"filterIcon",domSrc:k,domAlt:"Trash bag"});u.appendChild(m);const A=E({element:"button",className:"filterButton",domId:"completedTasksFilter",domText:"Complete"});return u.appendChild(A),e}()),n.appendChild(function(){const e=E({element:"div",className:"projectsList"}),n=E({element:"h2",className:"projectsTitle",domText:"Projects",domId:"projectsTitle"});e.appendChild(n);const t=E({element:"div",className:"newProjectsContainer",domId:"newProjectsContainer"});e.appendChild(t);const o=E({element:"img",className:"newProjectIcon",domSrc:T,domAlt:"Plus sign"});t.appendChild(o);const r=E({element:"button",className:"newProjectButton",domText:"Add project",domId:"newProject"});return t.appendChild(r),e}()),o.appendChild(function(){const e=E({element:"div",className:"filterTitle"}),n=E({element:"h2",className:"title",domText:"All tasks",domId:"filterTitle"});e.appendChild(n);const t=E({element:"h3",className:"filterDescription",domText:"Here are all your tasks",domId:"filterDescription"});return e.appendChild(t),e}()),t.appendChild(function(){const e=E({element:"div",className:"taskLabels",domId:"taskLabelsDiv"}),n=E({element:"p",className:"nameLabel",domText:"Task:"});e.appendChild(n);const t=E({element:"p",className:"descriptionLabel",domText:"Description:"});e.appendChild(t);const o=E({element:"p",className:"priorityLabel",domText:"Priority:"});e.appendChild(o);const r=E({element:"p",className:"projectLabel",domText:"Project:"});e.appendChild(r);const a=E({element:"p",className:"dueDateLabel",domText:"Due:"});return e.appendChild(a),e}()),t.appendChild(function(){const e=E({element:"div",className:"taskForm",domId:"formDiv"}),n=E({element:"form",domId:"newTaskForm"});e.appendChild(n);const t=E({element:"div",className:"inputs"});n.appendChild(t);const o=E({element:"input",domType:"text",domId:"taskName",domName:"taskName",domPlaceholder:"Task name..."});t.appendChild(o);const r=E({element:"input",domType:"text",domId:"taskDescription",domName:"taskDescription",domPlaceholder:"Task description..."});t.appendChild(r);const a=E({element:"select",domId:"priority",domName:"priority"}),i=E({element:"option",domValue:"low",domText:"Low"});a.appendChild(i);const s=E({element:"option",domValue:"medium",domText:"Medium"});a.appendChild(s);const l=E({element:"option",domValue:"high",domText:"High"});a.appendChild(l),t.appendChild(a);const d=E({element:"select",domId:"taskProject",domName:"project"});t.appendChild(d);const c=E({element:"input",domId:"dueDate",domType:"date"});t.appendChild(c);const u=E({element:"div",className:"formButtons"});n.appendChild(u);const m=E({element:"input",className:"saveButton",domType:"submit",domValue:"Save"});u.appendChild(m);const A=E({element:"button",className:"cancelButton",domType:"button",domText:"Cancel",domId:"cancelBtn"});return u.appendChild(A),e.classList.add("hidden"),e}()),t.appendChild(function(){const e=E({element:"div",className:"noTaskContainer",domId:"noTask"}),n=E({element:"p",className:"noTaskText",domText:"Hooray! You have no more tasks..."});return e.appendChild(n),e}()),t.appendChild(function(){const e=E({element:"div",className:"newTask",domId:"newTaskDiv"}),n=E({element:"img",className:"newTaskIcon",domSrc:T,domAlt:"plus icon"});e.appendChild(n);const t=E({element:"button",className:"newTaskButton",domId:"newTask",domText:"Add task"});return e.appendChild(t),e}())}(),function(){const e=document.getElementById("newTask"),n=document.getElementById("cancelBtn"),t=document.getElementById("formDiv"),o=document.getElementById("taskName"),r=document.getElementById("taskDescription"),a=document.getElementById("dueDate");e.addEventListener("click",(()=>{t.classList.contains("hidden")?t.classList.remove("hidden"):t.classList.add("hidden")})),n.addEventListener("click",(()=>{t.classList.add("hidden"),o.value=null,r.value=null,a.value=null}))}();let ln="main";const dn=[];$e(dn,"main"),Ke(ln);const cn=document.getElementById("newTaskForm"),un=document.getElementById("formDiv");cn.addEventListener("submit",(e=>{e.preventDefault();let n={id:sn(),complete:!1,name:e.target.elements.taskName.value,description:e.target.elements.taskDescription.value,priority:e.target.elements.priority.value,project:e.target.elements.project.value,due:e.target.elements.dueDate.value};dn.push(n),e.target.reset(),un.classList.add("hidden"),$e(dn,ln)})),document.getElementById("allTasks").addEventListener("click",(()=>{ln="main",Ke(ln),$e(dn,ln)})),document.getElementById("dueToday").addEventListener("click",(()=>{ln="due today",Ke(ln),$e(dn,ln)})),document.getElementById("dueThisWeek").addEventListener("click",(()=>{ln="due this week",Ke(ln),$e(dn,ln)})),document.getElementById("completedTasksFilter").addEventListener("click",(()=>{ln="complete",Ke(ln),$e(dn,ln)}));const mn=["No project"],An=document.getElementById("taskProject");if(mn.length>0)for(let e=0;e<mn.length;e++){const n=E({element:"option",domValue:mn[e],domText:mn[e]});An.appendChild(n)}const pn=document.getElementById("newProject"),fn=document.getElementById("newProjectsContainer"),hn=E({element:"form",domId:"projectForm",className:"hidden"});fn.insertAdjacentElement("beforebegin",hn);const gn=E({element:"input",domType:"text",domId:"projectName",domName:"projectName",domPlaceholder:"Project name..."});hn.appendChild(gn);const Cn=E({element:"div",className:"projectFormButtons"});hn.appendChild(Cn);const En=E({element:"input",className:"projectsSaveButton",domType:"submit",domValue:"Save"});Cn.appendChild(En);const bn=E({element:"button",className:"projectsCancelButton",domType:"button",domText:"Cancel",domId:"projectsCancelBtn"});Cn.appendChild(bn),pn.addEventListener("click",(()=>{hn.classList.remove("hidden")})),bn.addEventListener("click",(()=>{hn.classList.add("hidden")})),hn.addEventListener("submit",(e=>{e.preventDefault();const n=e.target.elements.projectName.value;mn.push(n),Bn(n),wn(n),e.target.reset(),hn.classList.add("hidden")}));const vn=E({element:"div",className:"createdProjects",domId:"createdProjects"});hn.insertAdjacentElement("beforebegin",vn);const wn=e=>{const n=E({element:"div",className:"singleProject"}),t=E({element:"img",domSrc:en,className:"checklistIcon"}),o=E({element:"button",className:"project",domText:e}),r=document.getElementById("taskProject");n.appendChild(t),n.appendChild(o),vn.appendChild(n),o.addEventListener("click",(()=>{ln=o.innerHTML,$e(dn,ln),Ke(ln),r.value=ln}))},Bn=e=>{const n=E({element:"option",domValue:e,domText:e});An.appendChild(n)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,